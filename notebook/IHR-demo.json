{
	"name": "IHR-demo",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "dapsparktest1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "5ec9ade6-f13a-4a6a-8dff-55029220fad6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ec88d831-317e-4fbd-b537-6a0ff8dca394/resourceGroups/rsg-dap-test/providers/Microsoft.Synapse/workspaces/dap-synapse-test1/bigDataPools/dapsparktest1",
				"name": "dapsparktest1",
				"type": "Spark",
				"endpoint": "https://dap-synapse-test1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dapsparktest1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install faker"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"import pyodbc\r\n",
					"import random\r\n",
					"import uuid\r\n",
					"from faker import Faker\r\n",
					"from datetime import datetime"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"input_person = []\r\n",
					"input_medical = []\r\n",
					"input_phone_number = []\r\n",
					"input_user_permission_group = []\r\n",
					"input_user_account = []\r\n",
					"input_email = []\r\n",
					"input_emergency_contact = []\r\n",
					"input_address = []\r\n",
					"input_job = []\r\n",
					"input_working_rights = []"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fake = Faker()\r\n",
					"for _ in range(500):\r\n",
					"    record_person = {}\r\n",
					"    record_medical = {}\r\n",
					"    record_email = {}\r\n",
					"    record_address = {}\r\n",
					"    record_person['id'] = str(uuid.uuid4())\r\n",
					"    record_person['first_name'] = fake.first_name()\r\n",
					"    record_person['middle_name'] = fake.first_name()\r\n",
					"    record_person['last_name'] = fake.last_name()\r\n",
					"    record_person['display_name'] = record_person['first_name'] + ' ' + record_person['last_name']\r\n",
					"    record_person['preferred_name'] = fake.user_name()\r\n",
					"    record_person['date_of_birth'] = fake.date_of_birth(minimum_age=18, maximum_age=65)\r\n",
					"    record_person['gender'] = random.choice(['Male', 'Female'])\r\n",
					"    record_person['is_supervisor'] = random.choice([True, False])\r\n",
					"    record_person['employee_number'] = str(random.randint(1, 100000))\r\n",
					"    record_person['salary'] = '$' + str(random.randint(6000, 50000))\r\n",
					"    record_person['auto_increment_intellihr_id'] = random.randint(1, 10000)\r\n",
					"    record_person['title'] = random.choice(['Mr', 'Ms', 'Mrs', 'Dr', 'Prof'])\r\n",
					"    record_person['employment_status'] = random.choice(['Current Staff', 'Former Staff'])\r\n",
					"    record_person['created_at'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
					"    record_person['updated_at'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
					"\r\n",
					"    input_person.append(record_person)\r\n",
					"\r\n",
					"    record_medical['id'] = str(uuid.uuid4())\r\n",
					"    record_medical['Body'] = random.choice(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\r\n",
					"    record_medical['IsPublic'] = fake.boolean()\r\n",
					"    record_medical['PersonId'] = record_person['id']\r\n",
					"\r\n",
					"    input_medical.append(record_medical) \r\n",
					"\r\n",
					"    record_email['Email'] = fake.email()\r\n",
					"    record_email['IsPrimary'] = fake.boolean()\r\n",
					"    record_email['IsPersonal'] = fake.boolean()\r\n",
					"    record_email['PersonId'] = record_person['id']\r\n",
					"\r\n",
					"    input_email.append(record_email)\r\n",
					"\r\n",
					"    record_address['AddressType'] = random.choice(['Personal', 'Correspondence'])\r\n",
					"    record_address['FullAddress'] = fake.address()\r\n",
					"    record_address['Country'] = 'Australia'\r\n",
					"    record_address['Postcode'] = random.randint(1000, 9999)\r\n",
					"    record_address['State'] = random.choice(['VIC', 'NSW','SA','WA','QLD'])\r\n",
					"    record_address['Suburb'] = random.choice(['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Adelaide', 'Gold Coast', 'Cranbourne', 'Canberra', 'Central Coast', 'Wollongong', 'Hobart', 'Geelong', 'Townsville', 'Ipswich', 'Newcastle', 'Cairns', 'Darwin', 'Toowoomba', 'Launceston', 'Ballarat', 'Bendigo', 'Mackay', 'Wagga Wagga', 'Hervey Bay', 'Pakenham', 'Port Macquarie', 'Caloundra', 'Frankston', 'Sunbury', 'Gladstone', 'Bathurst', 'Mildura', 'Southport', 'Dandenong', 'Warrnambool', 'Burnie', 'Quakers Hill', 'Caboolture', 'Mount Gambier', 'Traralgon', 'Armidale', 'Whyalla', 'Griffith', 'Mount Eliza', 'Nerang', 'Lara', 'Taree', 'Banora Point', 'Warragul', 'Cessnock', 'Horsham', 'Australind', 'Barwon Heads', 'Ulverstone', 'Echuca', 'Mount Barker', 'Morwell', 'Forster', 'Bongaree', 'Penrith', 'Goonellabah', 'Leopold', 'Campbelltown', 'Muswellbrook', 'Rutherford', 'Inverell', 'Parkes', 'Nambour', 'Mareeba', 'Wallan', 'Corinda', 'Casino', 'Gympie', 'Kingston', 'Grafton', 'Bowral', 'Young', 'Cowra', 'Swan Hill', 'Mudgee', 'Mount Evelyn', 'Andergrove', 'Moree', 'Nowra', 'Colac', 'Yanchep', 'Ballina', 'Leeton', 'Moss Vale', 'Springwood', 'Emu Plains', 'Ararat', 'Tweed Heads', 'Charters Towers', 'Katoomba', 'Mooroopna', 'Maryborough', 'Deniliquin', 'Mandurah', 'Bli Bli', 'Narrabri', 'Clifton Springs', 'Bargara', 'Kingscliff', 'Healesville', 'Fremantle', 'Blaxland', 'Kyabram', 'Sanctuary Point', 'Merrimac', 'Murwillumbah', 'Urraween', 'Kyneton', 'Cootamundra', 'Castlemaine', 'Bomaderry', 'Helensburgh', 'Port Augusta', 'Yass', 'Strathalbyn', 'Burpengary', 'Waterford', 'Lennox Head', 'Seymour', 'Nambucca Heads', 'Nuriootpa', 'Wauchope', 'Tumut', 'Tuncurry', 'Glen Innes', 'Yamba', 'Lakes Entrance', 'Kurri Kurri', 'Wynyard', 'North Mackay', 'Dromana', 'Mittagong', 'Alstonville', 'Stawell', 'Cannonvale', 'Point Vernon', 'Leongatha', 'Scone', 'Whittlesea', 'Corowa', 'Richmond', 'Cooranbong', 'Inverloch', 'New Norfolk', 'Wingham', 'Woolgoolga', 'Maffra', 'Lithgow', 'Millicent', 'Worragee', 'Tahmoor', 'Red Cliffs', 'Glenbrook', 'Nairne', 'Kiama Downs', 'Hazelbrook', 'Encounter Bay', 'Boulder', 'Picton', 'Albury', 'Mansfield', 'Churchill', 'Bucasia', 'Temora', 'Renmark', 'Tanunda', 'Loxton', 'Glenella', 'Numurkah', 'Korumburra', 'Rasmussen', 'Tatura', 'Old Bar', 'Narrandera', 'George Town', 'Wyong', 'Broadford', 'Drysdale', 'Cockatoo', 'Victor Harbor', 'Moama', 'Latrobe', 'Berri', 'Wellington', 'Thirlmere', 'Legana', 'The Entrance', 'Cobar', 'Gerringong', 'Margate', 'Trafalgar', 'Somerset', 'Kerang', 'Roxby Downs', 'Smithton', 'Longford', 'Beechworth', 'Penguin', 'Anna Bay', 'McLaren Vale', 'Pearcedale', 'Peregian Beach', 'Bellingen', 'Suffolk Park', 'Buninyong', 'Weston', 'Sawtell', 'Silverdale', 'Bay View', 'Lismore', 'Koo-Wee-Rup', 'Merimbula', 'Scarness', 'Lake Cathie', 'Condobolin', 'Paynesville', 'Maddingley', 'Hurstbridge', 'Quirindi', 'Blayney', 'Camperdown', 'Aldgate', 'Port Fairy', 'Vincentia', 'Euroa', 'Marcoola', 'Mullumbimby', 'Tura Beach', 'Eden', 'West Wyalong', 'Gilgandra', 'Robinvale', 'Wilton', 'Riverview', 'Bogangar', 'Shoalhaven Heads', 'Urunga', 'Bonny Hills', 'Stirling', 'Perth', 'Barmera', 'Kapunda', 'Thursday Island', 'Terranora', 'Woori Yallock', 'Saint Georges Basin', 'Tea Gardens', 'Culburra', 'Yarra Glen', 'Beaconsfield Upper', 'Deloraine', 'Greta', 'North Wonthaggi', 'Howlong', 'Williamstown', 'Waikerie', 'Hill Top', 'Hahndorf', 'Jindabyne', 'Lawson', 'Woodside', 'Narooma', 'Grenfell', 'Manilla', 'Daylesford', 'Lobethal', 'The Oaks', 'Aberdare', 'Dodges Ferry', 'Launching Place', 'Rutherglen', 'Goolwa', 'Willunga', 'Sandy Beach', 'Hadspen', 'Canowindra', 'Freeling', 'Saint Arnaud', 'Baxter', 'Walgett', 'Esperance', 'Yarram', 'Heddon Greta', 'Freshwater', 'Bangalow', 'Orbost', 'Westbury', 'Lyndoch', 'Camden Haven', 'Wallerawang', 'Wattleglen', 'Bourke', 'Mulwala', 'Windsor', 'Nathalia', 'Oakdale', 'Cobden', 'Queenstown', 'Denman', 'Batehaven', 'Brunswick Heads', 'Tathra', 'Yarragon', 'Yaroomba', 'Curlewis', 'Yallourn North', 'Drummond Cove', 'Surfside', 'Evandale', 'Kurrajong Heights', 'Seven Mile Beach', 'San Remo', 'Valley Heights', 'Greenwell Point', 'Innisfail', 'Wahgunyah', 'Tinonee', 'Mollymook'])\r\n",
					"    record_address['Street'] = record_address['FullAddress'].split(',')[0]\r\n",
					"    record_address['IsPrimary'] = fake.boolean()\r\n",
					"    record_address['PersonId'] = record_person['id']\r\n",
					"\r\n",
					"    input_address.append(record_address)\r\n",
					"\r\n",
					"    record_phone_number = {}\r\n",
					"    record_phone_number['Number']= random.randint(7000000000, 9000000000)\r\n",
					"    record_phone_number['FullNumber']= '+8-' + str(record_phone_number['Number'])\r\n",
					"    record_phone_number['IsPrimary'] = fake.boolean()\r\n",
					"    record_phone_number['IsPersonal'] = fake.boolean()\r\n",
					"    record_phone_number['PersonId'] = record_person['id']\r\n",
					"\r\n",
					"    input_phone_number.append(record_phone_number)\r\n",
					"\r\n",
					"    record_user_permission_group = {}\r\n",
					"    record_user_permission_group['Id'] = str(uuid.uuid4())\r\n",
					"    record_user_permission_group['PersonId'] = record_person['id']\r\n",
					"\r\n",
					"    input_user_permission_group.append(record_user_permission_group)\r\n",
					"\r\n",
					"    record_user_account = {}\r\n",
					"    record_user_account['Id'] = str(uuid.uuid4())\r\n",
					"    record_user_account['Username'] = fake.user_name()\r\n",
					"    record_user_account['IsEnabled'] = fake.boolean()\r\n",
					"    record_user_account['PersonId'] = record_person['id']\r\n",
					"\r\n",
					"    input_user_account.append(record_user_account)\r\n",
					"\r\n",
					"    record_emergency_contact = {}\r\n",
					"    record_emergency_contact['Phone']= random.randint(7000000000, 9000000000)\r\n",
					"    record_emergency_contact['Relation'] = random.choice(['Father', 'Mother','Wife','Husband','Others'])\r\n",
					"    record_emergency_contact['Email'] = fake.email()\r\n",
					"    record_emergency_contact['Name'] = record_emergency_contact['Email'].split('@')[0]\r\n",
					"    record_emergency_contact['PersonId'] = record_person['id']\r\n",
					"\r\n",
					"    input_emergency_contact.append(record_emergency_contact)\r\n",
					"\r\n",
					"    record_job = {}\r\n",
					"    record_job['Id'] = str(uuid.uuid4())\r\n",
					"    record_job['Name'] = record_person['first_name'] + ' ' + record_person['middle_name'] +  ' ' + record_person['last_name']\r\n",
					"    record_job['JobStatus'] = random.choice(['Active','Inactive'])\r\n",
					"    record_job['IsOnExtendedLeave'] = fake.boolean()\r\n",
					"    record_job['IsPrimaryJob'] = fake.boolean()\r\n",
					"    record_job['Link'] = random.choice(['HR','ENG','AI','DAP'])\r\n",
					"    record_job['PersonId'] = record_person['id']\r\n",
					"    record_person['StartDate'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
					"    record_person['EndDate'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
					"\r\n",
					"    input_job.append(record_job)\r\n",
					"\r\n",
					"    \r\n",
					"\r\n",
					"    record_working_rights = {}\r\n",
					"    record_working_rights['Name'] = random.choice(['Citizenship','PR','Work Visa'])\r\n",
					"    record_working_rights['Country'] = fake.country()\r\n",
					"    record_working_rights['ExpirationDate'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
					"    record_working_rights['PersonId'] = record_person['id']\r\n",
					"\r\n",
					"    \r\n",
					"    input_working_rights.append(record_working_rights)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_person = spark.createDataFrame(input_person)\r\n",
					"df_medical = spark.createDataFrame(input_medical)\r\n",
					"df_phone_number = spark.createDataFrame(input_phone_number)\r\n",
					"df_user_permission_group = spark.createDataFrame(input_user_permission_group)\r\n",
					"df_user_account = spark.createDataFrame(input_user_account)\r\n",
					"df_email = spark.createDataFrame(input_email)\r\n",
					"df_emergency_contact = spark.createDataFrame(input_emergency_contact)\r\n",
					"df_address = spark.createDataFrame(input_address)\r\n",
					"df_job = spark.createDataFrame(input_job)\r\n",
					"df_working_rights = spark.createDataFrame(input_working_rights)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df_primary_phone_number = df_phone_number[df_phone_number['IsPrimary'] == True].select(['Number','FullNumber', 'IsPersonal', 'PersonId'])\r\n",
					"df_primary_email = df_email[df_email['IsPrimary'] == True].select('Email', 'IsPersonal', 'PersonId')"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import com.microsoft.spark.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
					"from pyspark.sql.functions import col"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_person.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Person\")\r\n",
					"df_medical.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Medical\")\r\n",
					"df_phone_number.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Phone_Number\")\r\n",
					"df_primary_phone_number.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Primary_Phone_Number\")\r\n",
					"df_user_permission_group.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.User_Permission_Group\")\r\n",
					"df_user_account.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.User_Account\")\r\n",
					"df_email.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Email\")\r\n",
					"df_primary_email.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Primary_Email\")\r\n",
					"df_emergency_contact.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Emergency_Contact\")\r\n",
					"df_address.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Address\")\r\n",
					"df_working_rights.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Working_Rights\")\r\n",
					"df_job.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Job\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 11
			}
		]
	}
}