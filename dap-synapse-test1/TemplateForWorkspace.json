{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "dap-synapse-test1"
		},
		"StorageAccount_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'StorageAccount'",
			"defaultValue": "DefaultEndpointsProtocol=https;AccountName=dapsatest01;"
		},
		"dap-synapse-test1-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dap-synapse-test1-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:dap-synapse-test1.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_asqlmi_dap_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_asqlmi_dap'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=dap-synapse-test1.sql.azuresynapse.net;Initial Catalog=dapsqlpooltest1;User ID=sqladminnew"
		},
		"ls_sql_WWI_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_WWI'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=pbi-poc-sql-server.database.windows.net;Initial Catalog=WideWorldImportersDW-Standard;User ID=sqladminnew"
		},
		"ls_sql_imis_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_imis'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=dap-synapse-test1.sql.azuresynapse.net;Initial Catalog=dapsqlpooltest1;User ID=sqladminnew"
		},
		"Get Product Data_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dummyjson.com/products"
		},
		"LS_AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dap-akv.vault.azure.net/"
		},
		"dap-synapse-test1-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dapsatest01.dfs.core.windows.net"
		},
		"ls_adls_raw_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dapsatest01.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_API_to_Storage')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Token",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "['title']"
										},
										"sink": {
											"name": "title"
										}
									},
									{
										"source": {
											"path": "['description']"
										},
										"sink": {
											"name": "description"
										}
									},
									{
										"source": {
											"path": "['price']"
										},
										"sink": {
											"name": "price"
										}
									},
									{
										"source": {
											"path": "['discountPercentage']"
										},
										"sink": {
											"name": "discountPercentage"
										}
									},
									{
										"source": {
											"path": "['rating']"
										},
										"sink": {
											"name": "rating"
										}
									},
									{
										"source": {
											"path": "['stock']"
										},
										"sink": {
											"name": "stock"
										}
									},
									{
										"source": {
											"path": "['brand']"
										},
										"sink": {
											"name": "brand"
										}
									},
									{
										"source": {
											"path": "['category']"
										},
										"sink": {
											"name": "category"
										}
									},
									{
										"source": {
											"path": "['thumbnail']"
										},
										"sink": {
											"name": "thumbnail"
										}
									}
								],
								"collectionReference": "$['products']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://dummyjson.com/auth/login",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"username": "kminchelle",
								"password": "0lelplR"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API sample"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-10T00:30:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/RestResource1')]",
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_Jobs_child_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is a child pipeline which will be invoke from master pipeline and execute staging pipeline",
				"activities": [
					{
						"name": "Persistent Staging Processing",
						"description": "This pipeline process extract data from source system and copy into data lake landing zone and process staging ",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_Data_Jobs_staging_daily",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineRunId": {
									"value": "@pipeline().parameters.pMasterPipelineRunId",
									"type": "Expression"
								},
								"pModule": {
									"value": "@pipeline().parameters.p_Module",
									"type": "Expression"
								},
								"pSourceSystem": {
									"value": "@pipeline().parameters.pSourceSystem",
									"type": "Expression"
								},
								"pLoadType": {
									"value": "@pipeline().parameters.pLoadType",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pMasterPipelineRunId": {
						"type": "string"
					},
					"p_Module": {
						"type": "string"
					},
					"pSourceSystem": {
						"type": "string"
					},
					"pLoadType": {
						"type": "string"
					}
				},
				"variables": {
					"vSourceSQL": {
						"type": "String",
						"defaultValue": "select getdate()"
					},
					"vRawFileName": {
						"type": "String"
					},
					"vKeycolumn": {
						"type": "Array",
						"defaultValue": [
							"Id"
						]
					}
				},
				"folder": {
					"name": "Data-Acquisition/Job Adder"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:47:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Copy_Data_Jobs_staging_daily')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_Jobs_staging_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline hold actual processing logic",
				"activities": [
					{
						"name": "Get List of Sources",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Start Logging - Landing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": {
									"value": "SELECT [controlid],\n       [sourcename],\n       [sourcedatabase],\n       [sourceschemaname],\n       [sourcetablename],\n       [StagingSchemaName],\n       [StagingTableName],\n       [PersistentStagingSchemaName],\n       [PersistentStagingTableName]       \n       [incrementalload],\n\t   [sourcecolumns],\n\t   [watermarkcolumn],\n\t   [watermarkvalue],\n           [KeyColumn],\n       CASE\n         WHEN [incrementalload] = 'Y' THEN\n         'Select ' + [sourcecolumns] + ' From '\n         + [sourceschemaname] + '.' + [sourcetablename]\n         + ' Where ' + [watermarkcolumn] + ' >' + ''''\n         + CONVERT(VARCHAR, Cast(COALESCE(watermarkvalue, '01/01/1900') AS\n         DATETIME),\n         120)\n         + ''''\n         ELSE 'Select ' + [sourcecolumns] + ' From '\n              + [sourceschemaname] + '.' + [sourcetablename]\n       END     AS SourceQuery,\n       'data' AS DataLakeRootFolder,\n       [datalakefolder],\n       [PersistentStagingStoredProcName],\n       [lastrefreshedon],\n       [lastrefreshstatus]\nFROM   [Control].[ingestionconfig]\nWHERE  1 = 1\n       AND [enabled] = 'Y'\n       AND [frequency] = '@{pipeline().parameters.pLoadType}'\n       AND [SourceName] ='@{pipeline().parameters.pSourceSystem}'\n      -- AND [Module]='@{pipeline().parameters.pModule}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asqlmi_dap",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "Control",
									"TableName": "IngestionConfig"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Landing Processing",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Sources",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Sources').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Transient TableLoad",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set Filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlMISink",
											"preCopyScript": {
												"value": "if object_id('@{item().StagingSchemaName}.@{item().StagingTableName}') is not null\nTruncate table @{item().StagingSchemaName}.@{item().StagingTableName}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_excel",
											"type": "DatasetReference",
											"parameters": {
												"pContainer": {
													"value": "@item().DataLakeRootFolder",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@concat(item().DatalakeFolder,'/',item().SourceName,'/',\nitem().SourceTableName,'/yyyy=',formatDateTime(utcnow(),'yyyy'),'/mm=',formatDateTime(utcnow(),'MM'),'/dd=',formatDateTime(utcnow(),'dd')\n) ",
													"type": "Expression"
												},
												"pFileName": {
													"value": "@variables('vRawFileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_asqlmi_dap",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().StagingSchemaName       ",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().StagingTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set Filename",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Update Ingestion - Landing Started",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vRawFileName",
										"value": {
											"value": "@concat(item().SourceSchemaName,'_',item().SourceTableName,'_',\naddhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10),'.parquet')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Transient TableLoad",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"pContainer": {
													"value": "@item().DataLakeRootFolder",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@concat(item().DatalakeFolder,'/',item().SourceName,'/',\nitem().SourceTableName)",
													"type": "Expression"
												},
												"pFilename": {
													"value": "@variables('vRawFileName')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "ls_adls_raw",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@concat(item().DataLakeRootFolder,'/',item().DatalakeFolder,'/Rejects')",
												"type": "Expression"
											}
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Update Ingestion - Failed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Transient TableLoad",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Control].[usp_update_watermark]",
										"storedProcedureParameters": {
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Update Ingestion - Landing Complete",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Transient TableLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Control].[usp_update_watermark]",
										"storedProcedureParameters": {
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Landing",
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Update Ingestion - Landing Started",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Control].[usp_update_watermark]",
										"storedProcedureParameters": {
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Started",
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Start Logging - Landing",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": null,
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage2-Started",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "In Progress",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Complete Logs - Landing",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Landing Processing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage2-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PersistentStaging Processing",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Start Logging - PersistentStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Sources').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Merging Stage Data",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().PersistentStagingStoredProcName",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"LandingParquetFile": {
												"value": {
													"value": "@concat(item().DataLakeRootFolder,'/',item().DatalakeFolder,'/',\nitem().SourceName,'/',item().SourceTableName,'/',\nvariables('vRawFileName'))\n\n\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Start Logging - PersistentStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Complete Logs - Landing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": null,
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage3-Started",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "In Progress",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Complete Logs - PersistentStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PersistentStaging Processing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage3-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failed Logs - PersistentStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PersistentStaging Processing",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage3-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failed Logs - Landing",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Landing Processing",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage2-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pPipelineRunId": {
						"type": "string",
						"defaultValue": "1001"
					},
					"pModule": {
						"type": "string",
						"defaultValue": "Facilty"
					},
					"pSourceSystem": {
						"type": "string"
					},
					"pLoadType": {
						"type": "string",
						"defaultValue": "Weekly"
					}
				},
				"variables": {
					"vSourceSQL": {
						"type": "String",
						"defaultValue": "select getdate()"
					},
					"vRawFileName": {
						"type": "String"
					},
					"vKeycolumn": {
						"type": "Array",
						"defaultValue": [
							"Id"
						]
					},
					"vReturnCode": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "Data-Acquisition/Job Adder"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:46:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_asqlmi_dap')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_asqlmi_dap')]",
				"[concat(variables('workspaceId'), '/datasets/ds_excel')]",
				"[concat(variables('workspaceId'), '/datasets/ds_parquet')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_raw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_SNOW_child_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is a child pipeline which will be invoke from master pipeline and execute staging pipeline",
				"activities": [
					{
						"name": "Persistent Staging Processing",
						"description": "This pipeline process extract data from source system and copy into data lake landing zone and process staging ",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_Data_SNOW_staging_daily",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineRunId": {
									"value": "@pipeline().parameters.pMasterPipelineRunId",
									"type": "Expression"
								},
								"pModule": {
									"value": "@pipeline().parameters.p_Module",
									"type": "Expression"
								},
								"pSourceSystem": {
									"value": "@pipeline().parameters.pSourceSystem",
									"type": "Expression"
								},
								"pLoadType": {
									"value": "@pipeline().parameters.pLoadType",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pMasterPipelineRunId": {
						"type": "string"
					},
					"p_Module": {
						"type": "string"
					},
					"pSourceSystem": {
						"type": "string"
					},
					"pLoadType": {
						"type": "string"
					}
				},
				"variables": {
					"vSourceSQL": {
						"type": "String",
						"defaultValue": "select getdate()"
					},
					"vRawFileName": {
						"type": "String"
					},
					"vKeycolumn": {
						"type": "Array",
						"defaultValue": [
							"Id"
						]
					}
				},
				"folder": {
					"name": "Data-Acquisition/Service Now"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:46:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Copy_Data_SNOW_staging_daily')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_SNOW_master_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is generic data-driven ingestions pipeline for source system iMIS data extract ",
				"activities": [
					{
						"name": "Master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Start Logging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_Data_SNOW_child_daily",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pMasterPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"p_Module": {
									"value": "@pipeline().parameters.pModule",
									"type": "Expression"
								},
								"pSourceSystem": {
									"value": "@pipeline().parameters.pSourceSystem",
									"type": "Expression"
								},
								"pLoadType": {
									"value": "@pipeline().parameters.pLoadType",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Exception Logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Master",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": {
										"value": "@concat('Pipeline failed :',activity('Master').output.pipelineName, activity('Master').error.message\n)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Exception",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Start Logging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": null,
									"type": "String"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage1",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "In Progress",
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check Logs for Partial Complete",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": {
									"value": "select count(*) as IncompleteProcessCount from [Logs].[ProcessLogs] where  status='Error' and pipeline_run_id='@{pipeline().RunId}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asqlmi_dap",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "dbo",
									"TableName": "Payment"
								}
							}
						}
					},
					{
						"name": "Check Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Logs for Partial Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Logs for Partial Complete').output.firstRow.IncompleteProcessCount,0)\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Partial_Complete Logs",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Logs].[usp_ExceptionLog]",
										"storedProcedureParameters": {
											"CompleteDateTime": {
												"value": {
													"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactoryName": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": null,
												"type": "String"
											},
											"ExecutionDateTime": {
												"value": null,
												"type": "String"
											},
											"LoggingStage": {
												"value": "Final-Stage",
												"type": "String"
											},
											"PipelineName": {
												"value": null,
												"type": "String"
											},
											"runid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Partial Complete",
												"type": "String"
											},
											"TriggerTime": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Complete Logs",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Logs].[usp_ExceptionLog]",
										"storedProcedureParameters": {
											"CompleteDateTime": {
												"value": {
													"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactoryName": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": null,
												"type": "String"
											},
											"ExecutionDateTime": {
												"value": null,
												"type": "String"
											},
											"LoggingStage": {
												"value": "Final-Stage",
												"type": "String"
											},
											"PipelineName": {
												"value": null,
												"type": "String"
											},
											"runid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Complete",
												"type": "String"
											},
											"TriggerTime": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pRootFolder": {
						"type": "string",
						"defaultValue": "data"
					},
					"pRawFolder": {
						"type": "string",
						"defaultValue": "datasources/ServiceNow"
					},
					"pEmail": {
						"type": "string",
						"defaultValue": "mohan.chinthakayala@brennanit.com.au"
					},
					"pCustomFailureMessage": {
						"type": "string",
						"defaultValue": "The pipeline has crashed!"
					},
					"pModule": {
						"type": "string",
						"defaultValue": "N/A"
					},
					"pSourceSystem": {
						"type": "string",
						"defaultValue": "ServiceNow"
					},
					"pLoadType": {
						"type": "string",
						"defaultValue": "Daily"
					}
				},
				"variables": {
					"vRawFileName": {
						"type": "String"
					},
					"vKeycolumn": {
						"type": "Array",
						"defaultValue": [
							"Id"
						]
					}
				},
				"folder": {
					"name": "Data-Acquisition/Service Now"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:48:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Copy_Data_SNOW_child_daily')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_asqlmi_dap')]",
				"[concat(variables('workspaceId'), '/datasets/ds_asqlmi_dap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_SNOW_staging_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline hold actual processing logic",
				"activities": [
					{
						"name": "Get List of Sources",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Start Logging - Landing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": {
									"value": "SELECT [controlid],\n       [sourcename],\n       [sourcedatabase],\n       [sourceschemaname],\n       [sourcetablename],\n       [StagingSchemaName],\n       [StagingTableName],\n       [PersistentStagingSchemaName],\n       [PersistentStagingTableName]       \n       [incrementalload],\n\t   [sourcecolumns],\n\t   [watermarkcolumn],\n\t   [watermarkvalue],\n           [KeyColumn],\n       CASE\n         WHEN [incrementalload] = 'Y' THEN\n         'Select ' + [sourcecolumns] + ' From '\n         + [sourceschemaname] + '.' + [sourcetablename]\n         + ' Where ' + [watermarkcolumn] + ' >' + ''''\n         + CONVERT(VARCHAR, Cast(COALESCE(watermarkvalue, '01/01/1900') AS\n         DATETIME),\n         120)\n         + ''''\n         ELSE 'Select ' + [sourcecolumns] + ' From '\n              + [sourceschemaname] + '.' + [sourcetablename]\n       END     AS SourceQuery,\n       'data' AS DataLakeRootFolder,\n       [datalakefolder],\n       [PersistentStagingStoredProcName],\n       [lastrefreshedon],\n       [lastrefreshstatus]\nFROM   [Control].[ingestionconfig]\nWHERE  1 = 1\n       AND [enabled] = 'Y'\n       AND [frequency] = '@{pipeline().parameters.pLoadType}'\n       AND [SourceName] ='@{pipeline().parameters.pSourceSystem}'\n      -- AND [Module]='@{pipeline().parameters.pModule}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asqlmi_dap",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "Control",
									"TableName": "IngestionConfig"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Landing Processing",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Sources",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Sources').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Transient TableLoad",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set Filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlMISink",
											"preCopyScript": {
												"value": "if object_id('@{item().StagingSchemaName}.@{item().StagingTableName}') is not null\nTruncate table @{item().StagingSchemaName}.@{item().StagingTableName}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_csv",
											"type": "DatasetReference",
											"parameters": {
												"pContainer": {
													"value": "@item().DataLakeRootFolder",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@concat(item().DatalakeFolder,'/',item().SourceName,'/',\nitem().SourceTableName,'/yyyy=',formatDateTime(utcnow(),'yyyy'),'/mm=',formatDateTime(utcnow(),'MM'),'/dd=',formatDateTime(utcnow(),'dd')\n) ",
													"type": "Expression"
												},
												"pFileName": {
													"value": "@variables('vRawFileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_asqlmi_dap",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().StagingSchemaName       ",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().StagingTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set Filename",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Update Ingestion - Landing Started",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vRawFileName",
										"value": {
											"value": "@concat(item().SourceSchemaName,'_',item().SourceTableName,'_',\naddhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10),'.parquet')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Transient TableLoad",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"pContainer": {
													"value": "@item().DataLakeRootFolder",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@concat(item().DatalakeFolder,'/',item().SourceName,'/',\nitem().SourceTableName)",
													"type": "Expression"
												},
												"pFilename": {
													"value": "@variables('vRawFileName')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "ls_adls_raw",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@concat(item().DataLakeRootFolder,'/',item().DatalakeFolder,'/Rejects')",
												"type": "Expression"
											}
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Update Ingestion - Failed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Transient TableLoad",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Control].[usp_update_watermark]",
										"storedProcedureParameters": {
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Update Ingestion - Landing Complete",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Transient TableLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Control].[usp_update_watermark]",
										"storedProcedureParameters": {
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Landing",
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Update Ingestion - Landing Started",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Control].[usp_update_watermark]",
										"storedProcedureParameters": {
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Started",
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Start Logging - Landing",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": null,
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage2-Started",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "In Progress",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Complete Logs - Landing",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Landing Processing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage2-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PersistentStaging Processing",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Start Logging - PersistentStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Sources').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Merging Stage Data",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().PersistentStagingStoredProcName",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"LandingParquetFile": {
												"value": {
													"value": "@concat(item().DataLakeRootFolder,'/',item().DatalakeFolder,'/',\nitem().SourceName,'/',item().SourceTableName,'/',\nvariables('vRawFileName'))\n\n\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Start Logging - PersistentStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Complete Logs - Landing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": null,
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage3-Started",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "In Progress",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Complete Logs - PersistentStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PersistentStaging Processing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage3-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failed Logs - PersistentStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PersistentStaging Processing",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage3-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failed Logs - Landing",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Landing Processing",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage2-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pPipelineRunId": {
						"type": "string",
						"defaultValue": "1001"
					},
					"pModule": {
						"type": "string",
						"defaultValue": "Facilty"
					},
					"pSourceSystem": {
						"type": "string"
					},
					"pLoadType": {
						"type": "string",
						"defaultValue": "Weekly"
					}
				},
				"variables": {
					"vSourceSQL": {
						"type": "String",
						"defaultValue": "select getdate()"
					},
					"vRawFileName": {
						"type": "String"
					},
					"vKeycolumn": {
						"type": "Array",
						"defaultValue": [
							"Id"
						]
					},
					"vReturnCode": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "Data-Acquisition/Service Now"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:45:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_asqlmi_dap')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_asqlmi_dap')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv')]",
				"[concat(variables('workspaceId'), '/datasets/ds_parquet')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_raw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_Storage_to_DWH')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "storage csv to dedicated pool",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"preCopyScript": "Truncate Table [dbo].[Product];",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sqlDedicatedPool",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API sample"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-10T00:36:14Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/datasets/sqlDedicatedPool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_WWI_child_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is a child pipeline which will be invoke from master pipeline and execute staging pipeline",
				"activities": [
					{
						"name": "Persistent Staging Processing",
						"description": "This pipeline process extract data from source system and copy into data lake landing zone and process staging ",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_Data_WWI_staging_daily",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pPipelineRunId": {
									"value": "@pipeline().parameters.pMasterPipelineRunId",
									"type": "Expression"
								},
								"pModule": {
									"value": "@pipeline().parameters.p_Module",
									"type": "Expression"
								},
								"pSourceSystem": {
									"value": "@pipeline().parameters.pSourceSystem",
									"type": "Expression"
								},
								"pLoadType": {
									"value": "@pipeline().parameters.pLoadType",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pMasterPipelineRunId": {
						"type": "string"
					},
					"p_Module": {
						"type": "string"
					},
					"pSourceSystem": {
						"type": "string"
					},
					"pLoadType": {
						"type": "string"
					}
				},
				"variables": {
					"vSourceSQL": {
						"type": "String",
						"defaultValue": "select getdate()"
					},
					"vRawFileName": {
						"type": "String"
					},
					"vKeycolumn": {
						"type": "Array",
						"defaultValue": [
							"Id"
						]
					}
				},
				"folder": {
					"name": "Data-Acquisition/Azure DB-WWI"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:41:01Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Copy_Data_WWI_staging_daily')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_WWI_staging_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This pipeline hold actual processing logic",
				"activities": [
					{
						"name": "Get List of Sources",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Start Logging - Landing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": {
									"value": "SELECT [controlid],\n       [sourcename],\n       [sourcedatabase],\n       [sourceschemaname],\n       [sourcetablename],\n       [StagingSchemaName],\n       [StagingTableName],\n       [PersistentStagingSchemaName],\n       [PersistentStagingTableName]       \n       [incrementalload],\n\t   [sourcecolumns],\n\t   [watermarkcolumn],\n\t   [watermarkvalue],\n           [KeyColumn],\n       CASE\n         WHEN [incrementalload] = 'Y' THEN\n         'Select ' + [sourcecolumns] + ' From '\n         + [sourceschemaname] + '.' + [sourcetablename]\n         + ' Where ' + [watermarkcolumn] + ' >' + ''''\n         + CONVERT(VARCHAR, Cast(COALESCE(watermarkvalue, '01/01/1900') AS\n         DATETIME),\n         120)\n         + ''''\n         ELSE 'Select ' + [sourcecolumns] + ' From '\n              + [sourceschemaname] + '.' + [sourcetablename]\n       END     AS SourceQuery,\n       'data' AS DataLakeRootFolder,\n       [datalakefolder],\n       [PersistentStagingStoredProcName],\n       [lastrefreshedon],\n       [lastrefreshstatus]\nFROM   [Control].[ingestionconfig]\nWHERE  1 = 1\n       AND [enabled] = 'Y'\n       AND [frequency] = '@{pipeline().parameters.pLoadType}'\n       AND [SourceName] ='@{pipeline().parameters.pSourceSystem}'\n       AND [Module]='@{pipeline().parameters.pModule}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asqlmi_dap",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "Control",
									"TableName": "IngestionConfig"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Landing Processing",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get List of Sources",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Sources').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Generate Parquet File",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set Filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@item().SourceQuery",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sql_WWI",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().SourceSchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"pContainer": {
													"value": "@item().DataLakeRootFolder",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@concat(item().DatalakeFolder,'/',item().SourceName,'/',\nitem().SourceTableName,'/yyyy=',formatDateTime(utcnow(),'yyyy'),'/mm=',formatDateTime(utcnow(),'MM'),'/dd=',formatDateTime(utcnow(),'dd')\n) ",
													"type": "Expression"
												},
												"pFilename": {
													"value": "@variables('vRawFileName')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Transient TableLoad",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate Parquet File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "SqlMISink",
											"preCopyScript": {
												"value": "if object_id('@{item().StagingSchemaName}.@{item().StagingTableName}') is not null\nTruncate table @{item().StagingSchemaName}.@{item().StagingTableName}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"pContainer": {
													"value": "@item().DataLakeRootFolder",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@concat(item().DatalakeFolder,'/',item().SourceName,'/',\nitem().SourceTableName,'/yyyy=',formatDateTime(utcnow(),'yyyy'),'/mm=',formatDateTime(utcnow(),'MM'),'/dd=',formatDateTime(utcnow(),'dd')\n) ",
													"type": "Expression"
												},
												"pFilename": {
													"value": "@variables('vRawFileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_asqlmi_dap",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().StagingSchemaName       ",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().StagingTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set Filename",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Update Ingestion - Landing Started",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "vRawFileName",
										"value": {
											"value": "@concat(item().SourceSchemaName,'_',item().SourceTableName,'_',\naddhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10),'.parquet')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Delete File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Transient TableLoad",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"pContainer": {
													"value": "@item().DataLakeRootFolder",
													"type": "Expression"
												},
												"pDirectory": {
													"value": "@concat(item().DatalakeFolder,'/',item().SourceName,'/',\nitem().SourceTableName)",
													"type": "Expression"
												},
												"pFilename": {
													"value": "@variables('vRawFileName')",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "ls_adls_raw",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@concat(item().DataLakeRootFolder,'/',item().DatalakeFolder,'/Rejects')",
												"type": "Expression"
											}
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Update Ingestion - Failed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Transient TableLoad",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Control].[usp_update_watermark]",
										"storedProcedureParameters": {
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Failed",
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Update Ingestion - Landing Complete",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Transient TableLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Control].[usp_update_watermark]",
										"storedProcedureParameters": {
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Landing",
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Update Ingestion - Landing Started",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Control].[usp_update_watermark]",
										"storedProcedureParameters": {
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Started",
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Start Logging - Landing",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": null,
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage2-Started",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "In Progress",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Complete Logs - Landing",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Landing Processing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage2-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PersistentStaging Processing",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Start Logging - PersistentStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Sources').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Merging Stage Data",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().PersistentStagingStoredProcName",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"LandingParquetFile": {
												"value": {
													"value": "@concat(item().DataLakeRootFolder,'/',item().DatalakeFolder,'/',\nitem().SourceName,'/',item().SourceTableName,'/',\nvariables('vRawFileName'))\n\n\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().parameters.pPipelineRunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"SourceName": {
												"value": {
													"value": "@item().SourceName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().SourceTableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Start Logging - PersistentStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Complete Logs - Landing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": null,
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage3-Started",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "In Progress",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Complete Logs - PersistentStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PersistentStaging Processing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage3-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Complete",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failed Logs - PersistentStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PersistentStaging Processing",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage3-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Failed Logs - Landing",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Landing Processing",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage2-Finished",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().parameters.pPipelineRunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pPipelineRunId": {
						"type": "string",
						"defaultValue": "1001"
					},
					"pModule": {
						"type": "string",
						"defaultValue": "Facilty"
					},
					"pSourceSystem": {
						"type": "string"
					},
					"pLoadType": {
						"type": "string",
						"defaultValue": "Weekly"
					}
				},
				"variables": {
					"vSourceSQL": {
						"type": "String",
						"defaultValue": "select getdate()"
					},
					"vRawFileName": {
						"type": "String"
					},
					"vKeycolumn": {
						"type": "Array",
						"defaultValue": [
							"Id"
						]
					},
					"vReturnCode": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "Data-Acquisition/Azure DB-WWI"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:40:24Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_asqlmi_dap')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_asqlmi_dap')]",
				"[concat(variables('workspaceId'), '/datasets/ds_sql_WWI')]",
				"[concat(variables('workspaceId'), '/datasets/ds_parquet')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_raw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Copy_Data_using_Synapse Notebook')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Storing API result in csv file",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "rfp-demo01",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "dapsparktest1",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false
							},
							"driverSize": "Small"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Notebook Samples"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:45:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/rfp-demo01')]",
				"[concat(variables('workspaceId'), '/bigDataPools/dapsparktest1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Master_Copy_Data_API_to_DWH')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Data from online",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_Data_API_to_Storage",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Store data in SDP",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Data from online",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_Data_Storage_to_DWH",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API sample"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:33:21Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Copy_Data_API_to_Storage')]",
				"[concat(variables('workspaceId'), '/pipelines/PL_Copy_Data_Storage_to_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Master_Copy_Data_Jobs_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is generic data-driven ingestions pipeline for source system iMIS data extract ",
				"activities": [
					{
						"name": "Master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Start Logging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_Data_Jobs_child_daily",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pMasterPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"p_Module": {
									"value": "@pipeline().parameters.pModule",
									"type": "Expression"
								},
								"pSourceSystem": {
									"value": "@pipeline().parameters.pSourceSystem",
									"type": "Expression"
								},
								"pLoadType": {
									"value": "@pipeline().parameters.pLoadType",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Exception Logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Master",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": {
										"value": "@concat('Pipeline failed :',activity('Master').output.pipelineName, activity('Master').error.message\n)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Exception",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Start Logging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": null,
									"type": "String"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage1",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "In Progress",
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check Logs for Partial Complete",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": {
									"value": "select count(*) as IncompleteProcessCount from [Logs].[ProcessLogs] where  status='Error' and pipeline_run_id='@{pipeline().RunId}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asqlmi_dap",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "dbo",
									"TableName": "Payment"
								}
							}
						}
					},
					{
						"name": "Check Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Logs for Partial Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Logs for Partial Complete').output.firstRow.IncompleteProcessCount,0)\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Partial_Complete Logs",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Logs].[usp_ExceptionLog]",
										"storedProcedureParameters": {
											"CompleteDateTime": {
												"value": {
													"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactoryName": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": null,
												"type": "String"
											},
											"ExecutionDateTime": {
												"value": null,
												"type": "String"
											},
											"LoggingStage": {
												"value": "Final-Stage",
												"type": "String"
											},
											"PipelineName": {
												"value": null,
												"type": "String"
											},
											"runid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Partial Complete",
												"type": "String"
											},
											"TriggerTime": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Complete Logs",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Logs].[usp_ExceptionLog]",
										"storedProcedureParameters": {
											"CompleteDateTime": {
												"value": {
													"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactoryName": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": null,
												"type": "String"
											},
											"ExecutionDateTime": {
												"value": null,
												"type": "String"
											},
											"LoggingStage": {
												"value": "Final-Stage",
												"type": "String"
											},
											"PipelineName": {
												"value": null,
												"type": "String"
											},
											"runid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Complete",
												"type": "String"
											},
											"TriggerTime": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pRootFolder": {
						"type": "string",
						"defaultValue": "data"
					},
					"pRawFolder": {
						"type": "string",
						"defaultValue": "datasources/JobAdder"
					},
					"pEmail": {
						"type": "string",
						"defaultValue": "mohan.chinthakayala@brennanit.com.au"
					},
					"pCustomFailureMessage": {
						"type": "string",
						"defaultValue": "The pipeline has crashed!"
					},
					"pModule": {
						"type": "string",
						"defaultValue": "N/A"
					},
					"pSourceSystem": {
						"type": "string",
						"defaultValue": "JobAdder"
					},
					"pLoadType": {
						"type": "string",
						"defaultValue": "Daily"
					}
				},
				"variables": {
					"vRawFileName": {
						"type": "String"
					},
					"vKeycolumn": {
						"type": "Array",
						"defaultValue": [
							"Id"
						]
					}
				},
				"folder": {
					"name": "Data-Acquisition/Job Adder"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:48:29Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Copy_Data_Jobs_child_daily')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_asqlmi_dap')]",
				"[concat(variables('workspaceId'), '/datasets/ds_asqlmi_dap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Master_Copy_Data_WWI_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is generic data-driven ingestions pipeline for source system iMIS data extract ",
				"activities": [
					{
						"name": "Master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Start Logging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_Data_WWI_child_daily",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pMasterPipelineRunId": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"p_Module": {
									"value": "@pipeline().parameters.pModule",
									"type": "Expression"
								},
								"pSourceSystem": {
									"value": "@pipeline().parameters.pSourceSystem",
									"type": "Expression"
								},
								"pLoadType": {
									"value": "@pipeline().parameters.pLoadType",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Exception Logs",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Master",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactoryName": {
									"value": null,
									"type": "String"
								},
								"ErrorMessage": {
									"value": {
										"value": "@concat('Pipeline failed :',activity('Master').output.pipelineName, activity('Master').error.message\n)",
										"type": "Expression"
									},
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": null,
									"type": "String"
								},
								"LoggingStage": {
									"value": "Exception",
									"type": "String"
								},
								"PipelineName": {
									"value": null,
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "Failed",
									"type": "String"
								},
								"TriggerTime": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Start Logging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[Logs].[usp_ExceptionLog]",
							"storedProcedureParameters": {
								"CompleteDateTime": {
									"value": null,
									"type": "String"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"ExecutionDateTime": {
									"value": {
										"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
										"type": "Expression"
									},
									"type": "String"
								},
								"LoggingStage": {
									"value": "Stage1",
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"runid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "In Progress",
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_asqlmi_dap",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check Logs for Partial Complete",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlMISource",
								"sqlReaderQuery": {
									"value": "select count(*) as IncompleteProcessCount from [Logs].[ProcessLogs] where  status='Error' and pipeline_run_id='@{pipeline().RunId}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_asqlmi_dap",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "dbo",
									"TableName": "Payment"
								}
							}
						}
					},
					{
						"name": "Check Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check Logs for Partial Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check Logs for Partial Complete').output.firstRow.IncompleteProcessCount,0)\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Partial_Complete Logs",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Logs].[usp_ExceptionLog]",
										"storedProcedureParameters": {
											"CompleteDateTime": {
												"value": {
													"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactoryName": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": null,
												"type": "String"
											},
											"ExecutionDateTime": {
												"value": null,
												"type": "String"
											},
											"LoggingStage": {
												"value": "Final-Stage",
												"type": "String"
											},
											"PipelineName": {
												"value": null,
												"type": "String"
											},
											"runid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Partial Complete",
												"type": "String"
											},
											"TriggerTime": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Complete Logs",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[Logs].[usp_ExceptionLog]",
										"storedProcedureParameters": {
											"CompleteDateTime": {
												"value": {
													"value": "@addhours(formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss'),10)",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactoryName": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": null,
												"type": "String"
											},
											"ExecutionDateTime": {
												"value": null,
												"type": "String"
											},
											"LoggingStage": {
												"value": "Final-Stage",
												"type": "String"
											},
											"PipelineName": {
												"value": null,
												"type": "String"
											},
											"runid": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "Complete",
												"type": "String"
											},
											"TriggerTime": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_asqlmi_dap",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pRootFolder": {
						"type": "string",
						"defaultValue": "data"
					},
					"pRawFolder": {
						"type": "string",
						"defaultValue": "raw/wwi"
					},
					"pEmail": {
						"type": "string",
						"defaultValue": "mohan.chinthakayala@brennanit.com.au"
					},
					"pCustomFailureMessage": {
						"type": "string",
						"defaultValue": "The pipeline has crashed!"
					},
					"pModule": {
						"type": "string",
						"defaultValue": "N/A"
					},
					"pSourceSystem": {
						"type": "string",
						"defaultValue": "WWI"
					},
					"pLoadType": {
						"type": "string",
						"defaultValue": "Daily"
					}
				},
				"variables": {
					"vRawFileName": {
						"type": "String"
					},
					"vKeycolumn": {
						"type": "Array",
						"defaultValue": [
							"Id"
						]
					}
				},
				"folder": {
					"name": "Data-Acquisition/Azure DB-WWI"
				},
				"annotations": [],
				"lastPublishTime": "2023-12-06T22:41:31Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Copy_Data_WWI_child_daily')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_asqlmi_dap')]",
				"[concat(variables('workspaceId'), '/datasets/ds_asqlmi_dap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageAccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Data.csv",
						"folderPath": "DataSources/API",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/StorageAccount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestResource1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Get Product Data",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Get Product Data')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_asqlmi_dap')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_asqlmi_dap",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_asqlmi_dap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_raw",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pContainer": {
						"type": "string"
					},
					"pDirectory": {
						"type": "string"
					},
					"pFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ServiceNow_20231030.csv",
						"folderPath": {
							"value": "DataSources/ServiceNow",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "data",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_raw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_excel')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_raw",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pContainer": {
						"type": "string"
					},
					"pDirectory": {
						"type": "string"
					},
					"pFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "JobAdder_20231030.xlsx",
						"folderPath": "DataSources/JobAdder",
						"fileSystem": "data"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_raw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_raw",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pContainer": {
						"type": "string"
					},
					"pDirectory": {
						"type": "string"
					},
					"pFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pFilename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().pDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().pContainer",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_raw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_sql_WWI')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_WWI",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_sql_WWI')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_sql_imis')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_imis",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_sql_imis')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlDedicatedPool')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Product"
				},
				"sqlPool": {
					"referenceName": "dapsqlpooltest1",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/dapsqlpooltest1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Get Product Data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Get Product Data_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_AKV')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StorageAccount')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('StorageAccount_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "StorageKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dap-synapse-test1-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dap-synapse-test1-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dap-synapse-test1-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dap-synapse-test1-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_adls_raw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adls_raw_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "StorageKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_asqlmi_dap')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_asqlmi_dap_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "DWH-SQL-Pwd"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_sql_WWI')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_WWI_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "sqldb-WWI-sql-pwd"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_sql_imis')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_imis_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "DWH-SQL-Pwd"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TRG_Daily_Copy_Data_from_WWI')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Master_Copy_Data_API_to_DWH",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-12-06T22:37:00",
						"timeZone": "AUS Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								10
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Master_Copy_Data_API_to_DWH')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://dapsatest01.dfs.core.windows.net/data/DataSources/API/Data.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',HEADER_ROW = TRUE\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/user-create-script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "EXEC sp_addrolemember 'db_datareader', ServiceAttendant; \nEXEC sp_addrolemember 'db_datareader', ServiceLead;\nEXEC sp_addrolemember 'db_datareader', ServiceManager;\nEXEC sp_addrolemember 'db_datareader', ServiceHead;\n\nDENY unmask ON Dbo.person(salary) TO ServiceAttendant;\n\nGRANT unmask ON Dbo.person(salary) TO ServiceLead;\n\n\nEXECUTE AS USER = 'ServiceLead';\n\nSELECT *\nFROM dbo.Person;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dapsqlpooltest1",
						"poolName": "dapsqlpooltest1"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IHR-demo')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dapsparktest1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5ec9ade6-f13a-4a6a-8dff-55029220fad6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ec88d831-317e-4fbd-b537-6a0ff8dca394/resourceGroups/rsg-dap-test/providers/Microsoft.Synapse/workspaces/dap-synapse-test1/bigDataPools/dapsparktest1",
						"name": "dapsparktest1",
						"type": "Spark",
						"endpoint": "https://dap-synapse-test1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dapsparktest1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"pip install faker"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"import pyodbc\r\n",
							"import random\r\n",
							"import uuid\r\n",
							"from faker import Faker\r\n",
							"from datetime import datetime"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Tables"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"input_person = []\r\n",
							"input_medical = []\r\n",
							"input_phone_number = []\r\n",
							"input_user_permission_group = []\r\n",
							"input_user_account = []\r\n",
							"input_email = []\r\n",
							"input_emergency_contact = []\r\n",
							"input_address = []\r\n",
							"input_job = []\r\n",
							"input_working_rights = []"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"fake = Faker()\r\n",
							"for _ in range(500):\r\n",
							"    record_person = {}\r\n",
							"    record_medical = {}\r\n",
							"    record_email = {}\r\n",
							"    record_address = {}\r\n",
							"    record_person['id'] = str(uuid.uuid4())\r\n",
							"    record_person['first_name'] = fake.first_name()\r\n",
							"    record_person['middle_name'] = fake.first_name()\r\n",
							"    record_person['last_name'] = fake.last_name()\r\n",
							"    record_person['display_name'] = record_person['first_name'] + ' ' + record_person['last_name']\r\n",
							"    record_person['preferred_name'] = fake.user_name()\r\n",
							"    record_person['date_of_birth'] = fake.date_of_birth(minimum_age=18, maximum_age=65)\r\n",
							"    record_person['gender'] = random.choice(['Male', 'Female'])\r\n",
							"    record_person['is_supervisor'] = random.choice([True, False])\r\n",
							"    record_person['employee_number'] = str(random.randint(1, 100000))\r\n",
							"    record_person['salary'] = '$' + str(random.randint(6000, 50000))\r\n",
							"    record_person['auto_increment_intellihr_id'] = random.randint(1, 10000)\r\n",
							"    record_person['title'] = random.choice(['Mr', 'Ms', 'Mrs', 'Dr', 'Prof'])\r\n",
							"    record_person['employment_status'] = random.choice(['Current Staff', 'Former Staff'])\r\n",
							"    record_person['created_at'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
							"    record_person['updated_at'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
							"\r\n",
							"    input_person.append(record_person)\r\n",
							"\r\n",
							"    record_medical['id'] = str(uuid.uuid4())\r\n",
							"    record_medical['Body'] = random.choice(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\r\n",
							"    record_medical['IsPublic'] = fake.boolean()\r\n",
							"    record_medical['PersonId'] = record_person['id']\r\n",
							"\r\n",
							"    input_medical.append(record_medical) \r\n",
							"\r\n",
							"    record_email['Email'] = fake.email()\r\n",
							"    record_email['IsPrimary'] = fake.boolean()\r\n",
							"    record_email['IsPersonal'] = fake.boolean()\r\n",
							"    record_email['PersonId'] = record_person['id']\r\n",
							"\r\n",
							"    input_email.append(record_email)\r\n",
							"\r\n",
							"    record_address['AddressType'] = random.choice(['Personal', 'Correspondence'])\r\n",
							"    record_address['FullAddress'] = fake.address()\r\n",
							"    record_address['Country'] = 'Australia'\r\n",
							"    record_address['Postcode'] = random.randint(1000, 9999)\r\n",
							"    record_address['State'] = random.choice(['VIC', 'NSW','SA','WA','QLD'])\r\n",
							"    record_address['Suburb'] = random.choice(['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Adelaide', 'Gold Coast', 'Cranbourne', 'Canberra', 'Central Coast', 'Wollongong', 'Hobart', 'Geelong', 'Townsville', 'Ipswich', 'Newcastle', 'Cairns', 'Darwin', 'Toowoomba', 'Launceston', 'Ballarat', 'Bendigo', 'Mackay', 'Wagga Wagga', 'Hervey Bay', 'Pakenham', 'Port Macquarie', 'Caloundra', 'Frankston', 'Sunbury', 'Gladstone', 'Bathurst', 'Mildura', 'Southport', 'Dandenong', 'Warrnambool', 'Burnie', 'Quakers Hill', 'Caboolture', 'Mount Gambier', 'Traralgon', 'Armidale', 'Whyalla', 'Griffith', 'Mount Eliza', 'Nerang', 'Lara', 'Taree', 'Banora Point', 'Warragul', 'Cessnock', 'Horsham', 'Australind', 'Barwon Heads', 'Ulverstone', 'Echuca', 'Mount Barker', 'Morwell', 'Forster', 'Bongaree', 'Penrith', 'Goonellabah', 'Leopold', 'Campbelltown', 'Muswellbrook', 'Rutherford', 'Inverell', 'Parkes', 'Nambour', 'Mareeba', 'Wallan', 'Corinda', 'Casino', 'Gympie', 'Kingston', 'Grafton', 'Bowral', 'Young', 'Cowra', 'Swan Hill', 'Mudgee', 'Mount Evelyn', 'Andergrove', 'Moree', 'Nowra', 'Colac', 'Yanchep', 'Ballina', 'Leeton', 'Moss Vale', 'Springwood', 'Emu Plains', 'Ararat', 'Tweed Heads', 'Charters Towers', 'Katoomba', 'Mooroopna', 'Maryborough', 'Deniliquin', 'Mandurah', 'Bli Bli', 'Narrabri', 'Clifton Springs', 'Bargara', 'Kingscliff', 'Healesville', 'Fremantle', 'Blaxland', 'Kyabram', 'Sanctuary Point', 'Merrimac', 'Murwillumbah', 'Urraween', 'Kyneton', 'Cootamundra', 'Castlemaine', 'Bomaderry', 'Helensburgh', 'Port Augusta', 'Yass', 'Strathalbyn', 'Burpengary', 'Waterford', 'Lennox Head', 'Seymour', 'Nambucca Heads', 'Nuriootpa', 'Wauchope', 'Tumut', 'Tuncurry', 'Glen Innes', 'Yamba', 'Lakes Entrance', 'Kurri Kurri', 'Wynyard', 'North Mackay', 'Dromana', 'Mittagong', 'Alstonville', 'Stawell', 'Cannonvale', 'Point Vernon', 'Leongatha', 'Scone', 'Whittlesea', 'Corowa', 'Richmond', 'Cooranbong', 'Inverloch', 'New Norfolk', 'Wingham', 'Woolgoolga', 'Maffra', 'Lithgow', 'Millicent', 'Worragee', 'Tahmoor', 'Red Cliffs', 'Glenbrook', 'Nairne', 'Kiama Downs', 'Hazelbrook', 'Encounter Bay', 'Boulder', 'Picton', 'Albury', 'Mansfield', 'Churchill', 'Bucasia', 'Temora', 'Renmark', 'Tanunda', 'Loxton', 'Glenella', 'Numurkah', 'Korumburra', 'Rasmussen', 'Tatura', 'Old Bar', 'Narrandera', 'George Town', 'Wyong', 'Broadford', 'Drysdale', 'Cockatoo', 'Victor Harbor', 'Moama', 'Latrobe', 'Berri', 'Wellington', 'Thirlmere', 'Legana', 'The Entrance', 'Cobar', 'Gerringong', 'Margate', 'Trafalgar', 'Somerset', 'Kerang', 'Roxby Downs', 'Smithton', 'Longford', 'Beechworth', 'Penguin', 'Anna Bay', 'McLaren Vale', 'Pearcedale', 'Peregian Beach', 'Bellingen', 'Suffolk Park', 'Buninyong', 'Weston', 'Sawtell', 'Silverdale', 'Bay View', 'Lismore', 'Koo-Wee-Rup', 'Merimbula', 'Scarness', 'Lake Cathie', 'Condobolin', 'Paynesville', 'Maddingley', 'Hurstbridge', 'Quirindi', 'Blayney', 'Camperdown', 'Aldgate', 'Port Fairy', 'Vincentia', 'Euroa', 'Marcoola', 'Mullumbimby', 'Tura Beach', 'Eden', 'West Wyalong', 'Gilgandra', 'Robinvale', 'Wilton', 'Riverview', 'Bogangar', 'Shoalhaven Heads', 'Urunga', 'Bonny Hills', 'Stirling', 'Perth', 'Barmera', 'Kapunda', 'Thursday Island', 'Terranora', 'Woori Yallock', 'Saint Georges Basin', 'Tea Gardens', 'Culburra', 'Yarra Glen', 'Beaconsfield Upper', 'Deloraine', 'Greta', 'North Wonthaggi', 'Howlong', 'Williamstown', 'Waikerie', 'Hill Top', 'Hahndorf', 'Jindabyne', 'Lawson', 'Woodside', 'Narooma', 'Grenfell', 'Manilla', 'Daylesford', 'Lobethal', 'The Oaks', 'Aberdare', 'Dodges Ferry', 'Launching Place', 'Rutherglen', 'Goolwa', 'Willunga', 'Sandy Beach', 'Hadspen', 'Canowindra', 'Freeling', 'Saint Arnaud', 'Baxter', 'Walgett', 'Esperance', 'Yarram', 'Heddon Greta', 'Freshwater', 'Bangalow', 'Orbost', 'Westbury', 'Lyndoch', 'Camden Haven', 'Wallerawang', 'Wattleglen', 'Bourke', 'Mulwala', 'Windsor', 'Nathalia', 'Oakdale', 'Cobden', 'Queenstown', 'Denman', 'Batehaven', 'Brunswick Heads', 'Tathra', 'Yarragon', 'Yaroomba', 'Curlewis', 'Yallourn North', 'Drummond Cove', 'Surfside', 'Evandale', 'Kurrajong Heights', 'Seven Mile Beach', 'San Remo', 'Valley Heights', 'Greenwell Point', 'Innisfail', 'Wahgunyah', 'Tinonee', 'Mollymook'])\r\n",
							"    record_address['Street'] = record_address['FullAddress'].split(',')[0]\r\n",
							"    record_address['IsPrimary'] = fake.boolean()\r\n",
							"    record_address['PersonId'] = record_person['id']\r\n",
							"\r\n",
							"    input_address.append(record_address)\r\n",
							"\r\n",
							"    record_phone_number = {}\r\n",
							"    record_phone_number['Number']= random.randint(7000000000, 9000000000)\r\n",
							"    record_phone_number['FullNumber']= '+8-' + str(record_phone_number['Number'])\r\n",
							"    record_phone_number['IsPrimary'] = fake.boolean()\r\n",
							"    record_phone_number['IsPersonal'] = fake.boolean()\r\n",
							"    record_phone_number['PersonId'] = record_person['id']\r\n",
							"\r\n",
							"    input_phone_number.append(record_phone_number)\r\n",
							"\r\n",
							"    record_user_permission_group = {}\r\n",
							"    record_user_permission_group['Id'] = str(uuid.uuid4())\r\n",
							"    record_user_permission_group['PersonId'] = record_person['id']\r\n",
							"\r\n",
							"    input_user_permission_group.append(record_user_permission_group)\r\n",
							"\r\n",
							"    record_user_account = {}\r\n",
							"    record_user_account['Id'] = str(uuid.uuid4())\r\n",
							"    record_user_account['Username'] = fake.user_name()\r\n",
							"    record_user_account['IsEnabled'] = fake.boolean()\r\n",
							"    record_user_account['PersonId'] = record_person['id']\r\n",
							"\r\n",
							"    input_user_account.append(record_user_account)\r\n",
							"\r\n",
							"    record_emergency_contact = {}\r\n",
							"    record_emergency_contact['Phone']= random.randint(7000000000, 9000000000)\r\n",
							"    record_emergency_contact['Relation'] = random.choice(['Father', 'Mother','Wife','Husband','Others'])\r\n",
							"    record_emergency_contact['Email'] = fake.email()\r\n",
							"    record_emergency_contact['Name'] = record_emergency_contact['Email'].split('@')[0]\r\n",
							"    record_emergency_contact['PersonId'] = record_person['id']\r\n",
							"\r\n",
							"    input_emergency_contact.append(record_emergency_contact)\r\n",
							"\r\n",
							"    record_job = {}\r\n",
							"    record_job['Id'] = str(uuid.uuid4())\r\n",
							"    record_job['Name'] = record_person['first_name'] + ' ' + record_person['middle_name'] +  ' ' + record_person['last_name']\r\n",
							"    record_job['JobStatus'] = random.choice(['Active','Inactive'])\r\n",
							"    record_job['IsOnExtendedLeave'] = fake.boolean()\r\n",
							"    record_job['IsPrimaryJob'] = fake.boolean()\r\n",
							"    record_job['Link'] = random.choice(['HR','ENG','AI','DAP'])\r\n",
							"    record_job['PersonId'] = record_person['id']\r\n",
							"    record_person['StartDate'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
							"    record_person['EndDate'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
							"\r\n",
							"    input_job.append(record_job)\r\n",
							"\r\n",
							"    \r\n",
							"\r\n",
							"    record_working_rights = {}\r\n",
							"    record_working_rights['Name'] = random.choice(['Citizenship','PR','Work Visa'])\r\n",
							"    record_working_rights['Country'] = fake.country()\r\n",
							"    record_working_rights['ExpirationDate'] = fake.date_time_this_decade().strftime(\"%Y-%m-%d %H:%M:%S\")\r\n",
							"    record_working_rights['PersonId'] = record_person['id']\r\n",
							"\r\n",
							"    \r\n",
							"    input_working_rights.append(record_working_rights)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_person = spark.createDataFrame(input_person)\r\n",
							"df_medical = spark.createDataFrame(input_medical)\r\n",
							"df_phone_number = spark.createDataFrame(input_phone_number)\r\n",
							"df_user_permission_group = spark.createDataFrame(input_user_permission_group)\r\n",
							"df_user_account = spark.createDataFrame(input_user_account)\r\n",
							"df_email = spark.createDataFrame(input_email)\r\n",
							"df_emergency_contact = spark.createDataFrame(input_emergency_contact)\r\n",
							"df_address = spark.createDataFrame(input_address)\r\n",
							"df_job = spark.createDataFrame(input_job)\r\n",
							"df_working_rights = spark.createDataFrame(input_working_rights)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df_primary_phone_number = df_phone_number[df_phone_number['IsPrimary'] == True].select(['Number','FullNumber', 'IsPersonal', 'PersonId'])\r\n",
							"df_primary_email = df_email[df_email['IsPrimary'] == True].select('Email', 'IsPersonal', 'PersonId')"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.functions import col"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_person.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Person\")\r\n",
							"df_medical.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Medical\")\r\n",
							"df_phone_number.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Phone_Number\")\r\n",
							"df_primary_phone_number.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Primary_Phone_Number\")\r\n",
							"df_user_permission_group.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.User_Permission_Group\")\r\n",
							"df_user_account.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.User_Account\")\r\n",
							"df_email.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Email\")\r\n",
							"df_primary_email.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Primary_Email\")\r\n",
							"df_emergency_contact.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Emergency_Contact\")\r\n",
							"df_address.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Address\")\r\n",
							"df_working_rights.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Working_Rights\")\r\n",
							"df_job.write.mode(\"overwrite\").synapsesql(\"dapsqlpooltest1.dbo.Job\")\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 11
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rfp-demo01')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "dapsparktest1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0a01e75c-0dda-47e7-a21a-cc22680bf57c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"9d70eea0-f453-4c4f-b0fc-63563c3966c5": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "1",
												"1": "iPhone 9",
												"2": "An apple mobile which is nothing like apple",
												"3": "549",
												"4": "12.96",
												"5": "4.69",
												"6": "94",
												"7": "Apple",
												"8": "smartphones",
												"9": "https://i.dummyjson.com/data/products/1/thumbnail.jpg"
											},
											{
												"0": "2",
												"1": "iPhone X",
												"2": "SIM-Free, Model A19211 6.5-inch Super Retina HD display with OLED technology A12 Bionic chip with ...",
												"3": "899",
												"4": "17.94",
												"5": "4.44",
												"6": "34",
												"7": "Apple",
												"8": "smartphones",
												"9": "https://i.dummyjson.com/data/products/2/thumbnail.jpg"
											},
											{
												"0": "3",
												"1": "Samsung Universe 9",
												"2": "Samsung's new variant which goes beyond Galaxy to the Universe",
												"3": "1249",
												"4": "15.46",
												"5": "4.09",
												"6": "36",
												"7": "Samsung",
												"8": "smartphones",
												"9": "https://i.dummyjson.com/data/products/3/thumbnail.jpg"
											},
											{
												"0": "4",
												"1": "OPPOF19",
												"2": "OPPO F19 is officially announced on April 2021.",
												"3": "280",
												"4": "17.91",
												"5": "4.3",
												"6": "123",
												"7": "OPPO",
												"8": "smartphones",
												"9": "https://i.dummyjson.com/data/products/4/thumbnail.jpg"
											},
											{
												"0": "5",
												"1": "Huawei P30",
												"2": "Huawei’s re-badged P30 Pro New Edition was officially unveiled yesterday in Germany and now the device has made its way to the UK.",
												"3": "499",
												"4": "10.58",
												"5": "4.09",
												"6": "32",
												"7": "Huawei",
												"8": "smartphones",
												"9": "https://i.dummyjson.com/data/products/5/thumbnail.jpg"
											},
											{
												"0": "6",
												"1": "MacBook Pro",
												"2": "MacBook Pro 2021 with mini-LED display may launch between September, November",
												"3": "1749",
												"4": "11.02",
												"5": "4.57",
												"6": "83",
												"7": "Apple",
												"8": "laptops",
												"9": "https://i.dummyjson.com/data/products/6/thumbnail.png"
											},
											{
												"0": "7",
												"1": "Samsung Galaxy Book",
												"2": "Samsung Galaxy Book S (2020) Laptop With Intel Lakefield Chip, 8GB of RAM Launched",
												"3": "1499",
												"4": "4.15",
												"5": "4.25",
												"6": "50",
												"7": "Samsung",
												"8": "laptops",
												"9": "https://i.dummyjson.com/data/products/7/thumbnail.jpg"
											},
											{
												"0": "8",
												"1": "Microsoft Surface Laptop 4",
												"2": "Style and speed. Stand out on HD video calls backed by Studio Mics. Capture ideas on the vibrant touchscreen.",
												"3": "1499",
												"4": "10.23",
												"5": "4.43",
												"6": "68",
												"7": "Microsoft Surface",
												"8": "laptops",
												"9": "https://i.dummyjson.com/data/products/8/thumbnail.jpg"
											},
											{
												"0": "9",
												"1": "Infinix INBOOK",
												"2": "Infinix Inbook X1 Ci3 10th 8GB 256GB 14 Win10 Grey – 1 Year Warranty",
												"3": "1099",
												"4": "11.83",
												"5": "4.54",
												"6": "96",
												"7": "Infinix",
												"8": "laptops",
												"9": "https://i.dummyjson.com/data/products/9/thumbnail.jpg"
											},
											{
												"0": "10",
												"1": "HP Pavilion 15-DK1056WM",
												"2": "HP Pavilion 15-DK1056WM Gaming Laptop 10th Gen Core i5, 8GB, 256GB SSD, GTX 1650 4GB, Windows 10",
												"3": "1099",
												"4": "6.18",
												"5": "4.43",
												"6": "89",
												"7": "HP Pavilion",
												"8": "laptops",
												"9": "https://i.dummyjson.com/data/products/10/thumbnail.jpeg"
											},
											{
												"0": "11",
												"1": "perfume Oil",
												"2": "Mega Discount, Impression of Acqua Di Gio by GiorgioArmani concentrated attar perfume Oil",
												"3": "13",
												"4": "8.4",
												"5": "4.26",
												"6": "65",
												"7": "Impression of Acqua Di Gio",
												"8": "fragrances",
												"9": "https://i.dummyjson.com/data/products/11/thumbnail.jpg"
											},
											{
												"0": "12",
												"1": "Brown Perfume",
												"2": "Royal_Mirage Sport Brown Perfume for Men & Women - 120ml",
												"3": "40",
												"4": "15.66",
												"5": "4.0",
												"6": "52",
												"7": "Royal_Mirage",
												"8": "fragrances",
												"9": "https://i.dummyjson.com/data/products/12/thumbnail.jpg"
											},
											{
												"0": "13",
												"1": "Fog Scent Xpressio Perfume",
												"2": "Product details of Best Fog Scent Xpressio Perfume 100ml For Men cool long lasting perfumes for Men",
												"3": "13",
												"4": "8.14",
												"5": "4.59",
												"6": "61",
												"7": "Fog Scent Xpressio",
												"8": "fragrances",
												"9": "https://i.dummyjson.com/data/products/13/thumbnail.webp"
											},
											{
												"0": "14",
												"1": "Non-Alcoholic Concentrated Perfume Oil",
												"2": "Original Al Munakh® by Mahal Al Musk | Our Impression of Climate | 6ml Non-Alcoholic Concentrated Perfume Oil",
												"3": "120",
												"4": "15.6",
												"5": "4.21",
												"6": "114",
												"7": "Al Munakh",
												"8": "fragrances",
												"9": "https://i.dummyjson.com/data/products/14/thumbnail.jpg"
											},
											{
												"0": "15",
												"1": "Eau De Perfume Spray",
												"2": "Genuine  Al-Rehab spray perfume from UAE/Saudi Arabia/Yemen High Quality",
												"3": "30",
												"4": "10.99",
												"5": "4.7",
												"6": "105",
												"7": "Lord - Al-Rehab",
												"8": "fragrances",
												"9": "https://i.dummyjson.com/data/products/15/thumbnail.jpg"
											},
											{
												"0": "16",
												"1": "Hyaluronic Acid Serum",
												"2": "L'OrÃ©al Paris introduces Hyaluron Expert Replumping Serum formulated with 1.5% Hyaluronic Acid",
												"3": "19",
												"4": "13.31",
												"5": "4.83",
												"6": "110",
												"7": "L'Oreal Paris",
												"8": "skincare",
												"9": "https://i.dummyjson.com/data/products/16/thumbnail.jpg"
											},
											{
												"0": "17",
												"1": "Tree Oil 30ml",
												"2": "Tea tree oil contains a number of compounds, including terpinen-4-ol, that have been shown to kill certain bacteria,",
												"3": "12",
												"4": "4.09",
												"5": "4.52",
												"6": "78",
												"7": "Hemani Tea",
												"8": "skincare",
												"9": "https://i.dummyjson.com/data/products/17/thumbnail.jpg"
											},
											{
												"0": "18",
												"1": "Oil Free Moisturizer 100ml",
												"2": "Dermive Oil Free Moisturizer with SPF 20 is specifically formulated with ceramides, hyaluronic acid & sunscreen.",
												"3": "40",
												"4": "13.1",
												"5": "4.56",
												"6": "88",
												"7": "Dermive",
												"8": "skincare",
												"9": "https://i.dummyjson.com/data/products/18/thumbnail.jpg"
											},
											{
												"0": "19",
												"1": "Skin Beauty Serum.",
												"2": "Product name: rorec collagen hyaluronic acid white face serum riceNet weight: 15 m",
												"3": "46",
												"4": "10.68",
												"5": "4.42",
												"6": "54",
												"7": "ROREC White Rice",
												"8": "skincare",
												"9": "https://i.dummyjson.com/data/products/19/thumbnail.jpg"
											},
											{
												"0": "20",
												"1": "Freckle Treatment Cream- 15gm",
												"2": "Fair & Clear is Pakistan's only pure Freckle cream which helpsfade Freckles, Darkspots and pigments. Mercury level is 0%, so there are no side effects.",
												"3": "70",
												"4": "16.99",
												"5": "4.06",
												"6": "140",
												"7": "Fair & Clear",
												"8": "skincare",
												"9": "https://i.dummyjson.com/data/products/20/thumbnail.jpg"
											},
											{
												"0": "21",
												"1": "- Daal Masoor 500 grams",
												"2": "Fine quality Branded Product Keep in a cool and dry place",
												"3": "20",
												"4": "4.81",
												"5": "4.44",
												"6": "133",
												"7": "Saaf & Khaas",
												"8": "groceries",
												"9": "https://i.dummyjson.com/data/products/21/thumbnail.png"
											},
											{
												"0": "22",
												"1": "Elbow Macaroni - 400 gm",
												"2": "Product details of Bake Parlor Big Elbow Macaroni - 400 gm",
												"3": "14",
												"4": "15.58",
												"5": "4.57",
												"6": "146",
												"7": "Bake Parlor Big",
												"8": "groceries",
												"9": "https://i.dummyjson.com/data/products/22/thumbnail.jpg"
											},
											{
												"0": "23",
												"1": "Orange Essence Food Flavou",
												"2": "Specifications of Orange Essence Food Flavour For Cakes and Baking Food Item",
												"3": "14",
												"4": "8.04",
												"5": "4.85",
												"6": "26",
												"7": "Baking Food Items",
												"8": "groceries",
												"9": "https://i.dummyjson.com/data/products/23/thumbnail.jpg"
											},
											{
												"0": "24",
												"1": "cereals muesli fruit nuts",
												"2": "original fauji cereal muesli 250gm box pack original fauji cereals muesli fruit nuts flakes breakfast cereal break fast faujicereals cerels cerel foji fouji",
												"3": "46",
												"4": "16.8",
												"5": "4.94",
												"6": "113",
												"7": "fauji",
												"8": "groceries",
												"9": "https://i.dummyjson.com/data/products/24/thumbnail.jpg"
											},
											{
												"0": "25",
												"1": "Gulab Powder 50 Gram",
												"2": "Dry Rose Flower Powder Gulab Powder 50 Gram • Treats Wounds",
												"3": "70",
												"4": "13.58",
												"5": "4.87",
												"6": "47",
												"7": "Dry Rose",
												"8": "groceries",
												"9": "https://i.dummyjson.com/data/products/25/thumbnail.jpg"
											},
											{
												"0": "26",
												"1": "Plant Hanger For Home",
												"2": "Boho Decor Plant Hanger For Home Wall Decoration Macrame Wall Hanging Shelf",
												"3": "41",
												"4": "17.86",
												"5": "4.08",
												"6": "131",
												"7": "Boho Decor",
												"8": "home-decoration",
												"9": "https://i.dummyjson.com/data/products/26/thumbnail.jpg"
											},
											{
												"0": "27",
												"1": "Flying Wooden Bird",
												"2": "Package Include 6 Birds with Adhesive Tape Shape: 3D Shaped Wooden Birds Material: Wooden MDF, Laminated 3.5mm",
												"3": "51",
												"4": "15.58",
												"5": "4.41",
												"6": "17",
												"7": "Flying Wooden",
												"8": "home-decoration",
												"9": "https://i.dummyjson.com/data/products/27/thumbnail.webp"
											},
											{
												"0": "28",
												"1": "3D Embellishment Art Lamp",
												"2": "3D led lamp sticker Wall sticker 3d wall art light on/off button  cell operated (included)",
												"3": "20",
												"4": "16.49",
												"5": "4.82",
												"6": "54",
												"7": "LED Lights",
												"8": "home-decoration",
												"9": "https://i.dummyjson.com/data/products/28/thumbnail.jpg"
											},
											{
												"0": "29",
												"1": "Handcraft Chinese style",
												"2": "Handcraft Chinese style art luxury palace hotel villa mansion home decor ceramic vase with brass fruit plate",
												"3": "60",
												"4": "15.34",
												"5": "4.44",
												"6": "7",
												"7": "luxury palace",
												"8": "home-decoration",
												"9": "https://i.dummyjson.com/data/products/29/thumbnail.webp"
											},
											{
												"0": "30",
												"1": "Key Holder",
												"2": "Attractive DesignMetallic materialFour key hooksReliable & DurablePremium Quality",
												"3": "30",
												"4": "2.92",
												"5": "4.92",
												"6": "54",
												"7": "Golden",
												"8": "home-decoration",
												"9": "https://i.dummyjson.com/data/products/30/thumbnail.jpg"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "id",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "title",
												"type": "string"
											},
											{
												"key": "2",
												"name": "description",
												"type": "string"
											},
											{
												"key": "3",
												"name": "price",
												"type": "bigint"
											},
											{
												"key": "4",
												"name": "discountPercentage",
												"type": "double"
											},
											{
												"key": "5",
												"name": "rating",
												"type": "double"
											},
											{
												"key": "6",
												"name": "stock",
												"type": "bigint"
											},
											{
												"key": "7",
												"name": "brand",
												"type": "string"
											},
											{
												"key": "8",
												"name": "category",
												"type": "string"
											},
											{
												"key": "9",
												"name": "thumbnail",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ec88d831-317e-4fbd-b537-6a0ff8dca394/resourceGroups/rsg-dap-test/providers/Microsoft.Synapse/workspaces/dap-synapse-test1/bigDataPools/dapsparktest1",
						"name": "dapsparktest1",
						"type": "Spark",
						"endpoint": "https://dap-synapse-test1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dapsparktest1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"import requests\r\n",
							"import pandas as pd \r\n",
							"import azure.storage\r\n",
							"import org.apache.spark.sql\r\n",
							"from azure.storage.blob import BlobServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\r\n",
							"from pyspark.sql import SparkSession"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"url = \"https://dummyjson.com/products\"\r\n",
							"response = requests.get(url)\r\n",
							"if response.status_code == 200:\r\n",
							"    data = response.json()\r\n",
							"else:\r\n",
							"    print(\"Failed to fetch data from the API. Status code:\", response.status_code)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = pd.DataFrame(data['products'])\r\n",
							"del df['images']"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"accountKey = 'i0xmRxklcre7BXgl44/gpnYZN2HnUWkhJ6oqIqLyM77ZKoxhaZBxoRR2PkSjQtniu8dznD1flqxV+ASt6HL2RA=='"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.to_csv('abfss://dapfstest01@dapsatest01.dfs.core.windows.net/rfpdemo/output.csv', storage_options = {'accountKey': accountKey})"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dapsparktest1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 10
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 0,
					"minNodeCount": 0
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dapsqlpooltest1')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "australiaeast"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create_Serverless_External_Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT SynapseParquetFormat\n\tWITH ( FORMAT_TYPE = PARQUET)\n;\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'QuotedCsvWithHeaderFormat') \n    CREATE EXTERNAL FILE FORMAT QuotedCsvWithHeaderFormat\n    WITH (  \n        FORMAT_TYPE = DELIMITEDTEXT,    \n        FORMAT_OPTIONS ( PARSER_VERSION = '2.0',FIELD_TERMINATOR = ',', STRING_DELIMITER = '''', FIRST_ROW = 2 )\n    );\n\n\tIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'storagedatalakehouse') \n\tCREATE EXTERNAL DATA SOURCE storagedatalakehouse\n\tWITH (\nLOCATION   = 'https://dapsatest01.dfs.core.windows.net/data')\n;\n\nDROP EXTERNAL TABLE dbo.product;\n\nCREATE EXTERNAL TABLE dbo.product (\n    id FLOAT,\n    title NVARCHAR(20),\n    description NVARCHAR(20),\n    price FLOAT,\n    discountPercentage FLOAT,\n    rating FLOAT,\n    stock FLOAT,\n    brand NVARCHAR(200),\n    category NVARCHAR(200),\n    thumbnail NVARCHAR(200)\n) WITH (\n         LOCATION = '/DataSources/API/Data.csv',\n         DATA_SOURCE = storagedatalakehouse,\n         FILE_FORMAT = QuotedCsvWithHeaderFormat\n);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dap_serveless_pool",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Database1')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Database1",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true,
								"DerivedModelDBInfo": "{\"ModelDirectives\":{\"BaseModel\":{\"Name\":\"Mining\",\"Version\":\"1.1.0\"}}}"
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1",
								"Properties": {
									"FormatType": "csv",
									"LinkedServiceName": "dap-synapse-test1-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CostCategory",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "A categorization of costs.\n\nEx:\n- Variable Cost\n- Fixed Cost\n- Semi-Variable Cost",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CostCategoryId",
										"Description": "The unique identifier of a Cost Category.",
										"BaseAttributeReference": {
											"Entity": "CostCategory.cdm.json/CostCategory",
											"Name": "CostCategoryId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CostCategoryName",
										"Description": "The name of a Cost Category.",
										"BaseAttributeReference": {
											"Entity": "CostCategory.cdm.json/CostCategory",
											"Name": "CostCategoryName"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CostCategoryDescription",
										"Description": "The description of a Cost Category.",
										"BaseAttributeReference": {
											"Entity": "CostCategory.cdm.json/CostCategory",
											"Name": "CostCategoryDescription"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/CostCategory",
										"delimiter": ",",
										"multiLine": "false",
										"firstRowAsHeader": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/CostCategory",
									"Properties": {
										"LinkedServiceName": "dap-synapse-test1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CostCategoryId\":{\"entity\":\"CostCategory.cdm.json/CostCategory\",\"name\":\"CostCategoryId\"},\"CostCategoryName\":{\"entity\":\"CostCategory.cdm.json/CostCategory\",\"name\":\"CostCategoryName\"},\"CostCategoryDescription\":{\"entity\":\"CostCategory.cdm.json/CostCategory\",\"name\":\"CostCategoryDescription\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CostCategory\",\"path\":\"CostCategory.cdm.json/CostCategory\"},\"description\":\"A categorization of costs.\\n\\nEx:\\n- Variable Cost\\n- Fixed Cost\\n- Semi-Variable Cost\",\"primaryKey\":[\"CostCategoryId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CostCategory.cdm.json/CostCategory\",\"name\":\"CostCategoryId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Cost Category.\",\"isNullable\":false,\"name\":\"CostCategoryId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CostCategory.cdm.json/CostCategory\",\"name\":\"CostCategoryName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a Cost Category.\",\"isNullable\":true,\"name\":\"CostCategoryName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CostCategory.cdm.json/CostCategory\",\"name\":\"CostCategoryDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of a Cost Category.\",\"isNullable\":true,\"name\":\"CostCategoryDescription\"}]}}}",
								"Description": "A categorization of costs.\n\nEx:\n- Variable Cost\n- Fixed Cost\n- Semi-Variable Cost",
								"DisplayFolderInfo": "{\"name\":\"Manufacturing\",\"colorCode\":\"#00727A\"}",
								"PrimaryKeys": "CostCategoryId",
								"spark.sql.sources.provider": "csv",
								"sql:IsAppendOnly": false
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CostType",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "A type of cost associated with an activity, item or asset.\n\nEx:\n- Capital Cost\n- Investment Cost\n- Operating Cost\n- Personnel Cost\n- Recruitment Cost\n- Regulatory Cost\n- Land Cost\n- Construction Cost\n- Installation Cost\n- Equipment Cost\n- Maintenance Cost\n- Fuel Cost\n- Labor Cost\n\nVariable costs are costs that vary in proportion to the changes in levels of activity or volume of production.\n\nEx:\n- Supplies\n- Fuel\n- Electricity\n- Spoilage\n- Defects\n- Travel (Airfare)\n- Lodging\n- Meals\n- Supplies\n- Office Rental\n- Office Supplies\n- Equipment Rental\n- IT Equipment\n- Telephone and Telecom\n- Workshops / Meetings\n- Security\n- Chemical Cost\n- Cleaning Cost\n- Deep Well Injection Cost \n- Energy Cost\n- Environmental Cost  \n- Membrane Cost\n- Off-Site Treatment Cost\n- Water Disposal Transportation Cost\n- Water Hauling Transportation Cost\n- Water Replacement Cost\n\nFixed costs do not change in total regardless of the number of activities performed or level of activities.\n\nEx:\n- Property taxes\n- Depreciation of plant and equipment\n- Insurance\n\nSemi-variable or mixed costs contain both a fixed element and a variable component.\n\nEx:\n- Supervision\n- Quality inspection\n- Utilities\n- Fringe Benefits\n- Maintenance and repairs\n- Compensation insurance\n- Payroll taxes\n- Rentals",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CostTypeId",
										"Description": "The unique identifier of a Cost Type.",
										"BaseAttributeReference": {
											"Entity": "CostType.cdm.json/CostType",
											"Name": "CostTypeId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CostTypeName",
										"Description": "The name of a Cost Type.",
										"BaseAttributeReference": {
											"Entity": "CostType.cdm.json/CostType",
											"Name": "CostTypeName"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CostTypeDescription",
										"Description": "The description of a Cost Type.",
										"BaseAttributeReference": {
											"Entity": "CostType.cdm.json/CostType",
											"Name": "CostTypeDescription"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CostCategoryId",
										"Description": "The unique identifier of a Cost Category.",
										"BaseAttributeReference": {
											"Entity": "CostType.cdm.json/CostType",
											"Name": "CostCategoryId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/CostType",
										"delimiter": ",",
										"multiLine": "false",
										"firstRowAsHeader": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/CostType",
									"Properties": {
										"LinkedServiceName": "dap-synapse-test1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CostTypeId\":{\"entity\":\"CostType.cdm.json/CostType\",\"name\":\"CostTypeId\"},\"CostTypeName\":{\"entity\":\"CostType.cdm.json/CostType\",\"name\":\"CostTypeName\"},\"CostTypeDescription\":{\"entity\":\"CostType.cdm.json/CostType\",\"name\":\"CostTypeDescription\"},\"CostCategoryId\":{\"entity\":\"CostType.cdm.json/CostType\",\"name\":\"CostCategoryId\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CostType\",\"path\":\"CostType.cdm.json/CostType\"},\"description\":\"A type of cost associated with an activity, item or asset.\\n\\nEx:\\n- Capital Cost\\n- Investment Cost\\n- Operating Cost\\n- Personnel Cost\\n- Recruitment Cost\\n- Regulatory Cost\\n- Land Cost\\n- Construction Cost\\n- Installation Cost\\n- Equipment Cost\\n- Maintenance Cost\\n- Fuel Cost\\n- Labor Cost\\n\\nVariable costs are costs that vary in proportion to the changes in levels of activity or volume of production.\\n\\nEx:\\n- Supplies\\n- Fuel\\n- Electricity\\n- Spoilage\\n- Defects\\n- Travel (Airfare)\\n- Lodging\\n- Meals\\n- Supplies\\n- Office Rental\\n- Office Supplies\\n- Equipment Rental\\n- IT Equipment\\n- Telephone and Telecom\\n- Workshops / Meetings\\n- Security\\n- Chemical Cost\\n- Cleaning Cost\\n- Deep Well Injection Cost \\n- Energy Cost\\n- Environmental Cost  \\n- Membrane Cost\\n- Off-Site Treatment Cost\\n- Water Disposal Transportation Cost\\n- Water Hauling Transportation Cost\\n- Water Replacement Cost\\n\\nFixed costs do not change in total regardless of the number of activities performed or level of activities.\\n\\nEx:\\n- Property taxes\\n- Depreciation of plant and equipment\\n- Insurance\\n\\nSemi-variable or mixed costs contain both a fixed element and a variable component.\\n\\nEx:\\n- Supervision\\n- Quality inspection\\n- Utilities\\n- Fringe Benefits\\n- Maintenance and repairs\\n- Compensation insurance\\n- Payroll taxes\\n- Rentals\",\"primaryKey\":[\"CostTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CostType.cdm.json/CostType\",\"name\":\"CostTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Cost Type.\",\"isNullable\":false,\"name\":\"CostTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CostType.cdm.json/CostType\",\"name\":\"CostTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a Cost Type.\",\"isNullable\":true,\"name\":\"CostTypeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CostType.cdm.json/CostType\",\"name\":\"CostTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of a Cost Type.\",\"isNullable\":true,\"name\":\"CostTypeDescription\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CostType.cdm.json/CostType\",\"name\":\"CostCategoryId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Cost Category.\",\"isNullable\":true,\"name\":\"CostCategoryId\"}]}}}",
								"Description": "A type of cost associated with an activity, item or asset.\n\nEx:\n- Capital Cost\n- Investment Cost\n- Operating Cost\n- Personnel Cost\n- Recruitment Cost\n- Regulatory Cost\n- Land Cost\n- Construction Cost\n- Installation Cost\n- Equipment Cost\n- Maintenance Cost\n- Fuel Cost\n- Labor Cost\n\nVariable costs are costs that vary in proportion to the changes in levels of activity or volume of production.\n\nEx:\n- Supplies\n- Fuel\n- Electricity\n- Spoilage\n- Defects\n- Travel (Airfare)\n- Lodging\n- Meals\n- Supplies\n- Office Rental\n- Office Supplies\n- Equipment Rental\n- IT Equipment\n- Telephone and Telecom\n- Workshops / Meetings\n- Security\n- Chemical Cost\n- Cleaning Cost\n- Deep Well Injection Cost \n- Energy Cost\n- Environmental Cost  \n- Membrane Cost\n- Off-Site Treatment Cost\n- Water Disposal Transportation Cost\n- Water Hauling Transportation Cost\n- Water Replacement Cost\n\nFixed costs do not change in total regardless of the number of activities performed or level of activities.\n\nEx:\n- Property taxes\n- Depreciation of plant and equipment\n- Insurance\n\nSemi-variable or mixed costs contain both a fixed element and a variable component.\n\nEx:\n- Supervision\n- Quality inspection\n- Utilities\n- Fringe Benefits\n- Maintenance and repairs\n- Compensation insurance\n- Payroll taxes\n- Rentals",
								"DisplayFolderInfo": "{\"name\":\"Manufacturing\",\"colorCode\":\"#00727A\"}",
								"PrimaryKeys": "CostTypeId",
								"spark.sql.sources.provider": "csv",
								"sql:IsAppendOnly": false
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "EmissionWasteType",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "The type of emission waste:\n\nEx:\n- cardboard\n- food waste\n- waste water\n- solid waste\n- third-party disposal waste\n\nEmissions from waste depend on the type of waste being disposed of, and the waste diversion method. \n\nCompanies should collect:\n\n- Waste type-specific and waste treatment-specific emission factors. The emission factors should include end-of-life processes only. Emission factors may include emissions from transportation of waste.",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "EmissionWasteTypeId",
										"Description": "The unique identifier of a waste type.",
										"BaseAttributeReference": {
											"Entity": "EmissionWasteType.cdm.json/EmissionWasteType",
											"Name": "EmissionWasteTypeId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "EmissionWasteTypeName",
										"Description": "The name of a waste type.",
										"BaseAttributeReference": {
											"Entity": "EmissionWasteType.cdm.json/EmissionWasteType",
											"Name": "EmissionWasteTypeName"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "EmissionWasteTypeDescription",
										"Description": "The description of a waste type.",
										"BaseAttributeReference": {
											"Entity": "EmissionWasteType.cdm.json/EmissionWasteType",
											"Name": "EmissionWasteTypeDescription"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "EmissionWasteTypeEmissionFactorUnits",
										"Description": "The number of water type emission factor units.",
										"BaseAttributeReference": {
											"Entity": "EmissionWasteType.cdm.json/EmissionWasteType",
											"Name": "EmissionWasteTypeEmissionFactorUnits"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "EmissionWasteTypeEmissionFactorUomId",
										"Description": "The unique identifier associated with the waste type emission factor unit of measure.",
										"BaseAttributeReference": {
											"Entity": "EmissionWasteType.cdm.json/EmissionWasteType",
											"Name": "EmissionWasteTypeEmissionFactorUomId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/EmissionWasteType",
										"delimiter": ",",
										"multiLine": "false",
										"firstRowAsHeader": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/EmissionWasteType",
									"Properties": {
										"LinkedServiceName": "dap-synapse-test1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"EmissionWasteTypeId\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeId\"},\"EmissionWasteTypeName\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeName\"},\"EmissionWasteTypeDescription\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeDescription\"},\"EmissionWasteTypeEmissionFactorUnits\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeEmissionFactorUnits\"},\"EmissionWasteTypeEmissionFactorUomId\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeEmissionFactorUomId\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"EmissionWasteType\",\"path\":\"EmissionWasteType.cdm.json/EmissionWasteType\"},\"description\":\"The type of emission waste:\\n\\nEx:\\n- cardboard\\n- food waste\\n- waste water\\n- solid waste\\n- third-party disposal waste\\n\\nEmissions from waste depend on the type of waste being disposed of, and the waste diversion method. \\n\\nCompanies should collect:\\n\\n- Waste type-specific and waste treatment-specific emission factors. The emission factors should include end-of-life processes only. Emission factors may include emissions from transportation of waste.\",\"primaryKey\":[\"EmissionWasteTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a waste type.\",\"isNullable\":false,\"name\":\"EmissionWasteTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a waste type.\",\"isNullable\":true,\"name\":\"EmissionWasteTypeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of a waste type.\",\"isNullable\":true,\"name\":\"EmissionWasteTypeDescription\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeEmissionFactorUnits\"},\"dataType\":\"integer\",\"description\":\"The number of water type emission factor units.\",\"isNullable\":true,\"name\":\"EmissionWasteTypeEmissionFactorUnits\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"EmissionWasteType.cdm.json/EmissionWasteType\",\"name\":\"EmissionWasteTypeEmissionFactorUomId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier associated with the waste type emission factor unit of measure.\",\"isNullable\":true,\"name\":\"EmissionWasteTypeEmissionFactorUomId\"}]}}}",
								"Description": "The type of emission waste:\n\nEx:\n- cardboard\n- food waste\n- waste water\n- solid waste\n- third-party disposal waste\n\nEmissions from waste depend on the type of waste being disposed of, and the waste diversion method. \n\nCompanies should collect:\n\n- Waste type-specific and waste treatment-specific emission factors. The emission factors should include end-of-life processes only. Emission factors may include emissions from transportation of waste.",
								"DisplayFolderInfo": "{\"name\":\"Manufacturing\",\"colorCode\":\"#00727A\"}",
								"PrimaryKeys": "EmissionWasteTypeId",
								"spark.sql.sources.provider": "csv",
								"sql:IsAppendOnly": false
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Manufacturer",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "An entity that manufactures a product.",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "ManufacturerId",
										"Description": "The unique identifier of a Manufacturer.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "ManufacturerId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturerBusinessName",
										"Description": "The business name of the Manufacturer.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "ManufacturerBusinessName"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "LegalEntityFormId",
										"Description": "The unique identifier of the Legal Entity Form.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "LegalEntityFormId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "LocationId",
										"Description": "The unique identifier of a Location.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "LocationId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "PartyId",
										"Description": "The unique identifier of a Party.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "PartyId"
										},
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "GlobalLocationNumber",
										"Description": "The Global Location Number (GLN) is a simple tool used to uniquely identify locations. It can be used to identify physical locations such as a warehouse, legal entities, or a function / department within a legal entity. The GLN is part of the GS1 system of standards.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "GlobalLocationNumber"
										},
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 13,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DunsNumber",
										"Description": "The DUNS number is a nine-digit number issued by Dun & Bradstreet and assigned to each business location in the D&B database having a unique, separate, and distinct operation to businesses for the purpose of identifying them. The number as issued is random and the digits apparently have no significance as to their issuance.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "DunsNumber"
										},
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 9,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DunBradstreetSingleLocationSubsidiary",
										"Description": "There are eight (8) types of business relationships defined in D&B WorldBase:\n\nSingle Location Subsidiary\n\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \"single location\" and is not part of a corporate family.\n\nHeadquarters\n\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\n\nBranch\n\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\n\nDivision\n\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\n\nSubsidiary\n\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\n\nParent\n\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\n\nDomestic Ultimate\n\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\n\nGlobal Ultimate\n\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "DunBradstreetSingleLocationSubsidiary"
										},
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DunBradstreetHeadquarters",
										"Description": "There are eight (8) types of business relationships defined in D&B WorldBase:\n\nSingle Location Subsidiary\n\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \"single location\" and is not part of a corporate family.\n\nHeadquarters\n\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\n\nBranch\n\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\n\nDivision\n\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\n\nSubsidiary\n\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\n\nParent\n\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\n\nDomestic Ultimate\n\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\n\nGlobal Ultimate\n\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "DunBradstreetHeadquarters"
										},
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DunBradstreetBranch",
										"Description": "There are eight (8) types of business relationships defined in D&B WorldBase:\n\nSingle Location Subsidiary\n\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \"single location\" and is not part of a corporate family.\n\nHeadquarters\n\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\n\nBranch\n\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\n\nDivision\n\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\n\nSubsidiary\n\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\n\nParent\n\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\n\nDomestic Ultimate\n\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\n\nGlobal Ultimate\n\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "DunBradstreetBranch"
										},
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DunBradstreetDivision",
										"Description": "There are eight (8) types of business relationships defined in D&B WorldBase:\n\nSingle Location Subsidiary\n\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \"single location\" and is not part of a corporate family.\n\nHeadquarters\n\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\n\nBranch\n\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\n\nDivision\n\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\n\nSubsidiary\n\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\n\nParent\n\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\n\nDomestic Ultimate\n\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\n\nGlobal Ultimate\n\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "DunBradstreetDivision"
										},
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DunBradstreetSubsidiary",
										"Description": "There are eight (8) types of business relationships defined in D&B WorldBase:\n\nSingle Location Subsidiary\n\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \"single location\" and is not part of a corporate family.\n\nHeadquarters\n\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\n\nBranch\n\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\n\nDivision\n\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\n\nSubsidiary\n\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\n\nParent\n\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\n\nDomestic Ultimate\n\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\n\nGlobal Ultimate\n\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "DunBradstreetSubsidiary"
										},
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DunBradstreetParent",
										"Description": "There are eight (8) types of business relationships defined in D&B WorldBase:\n\nSingle Location Subsidiary\n\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \"single location\" and is not part of a corporate family.\n\nHeadquarters\n\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\n\nBranch\n\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\n\nDivision\n\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\n\nSubsidiary\n\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\n\nParent\n\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\n\nDomestic Ultimate\n\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\n\nGlobal Ultimate\n\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "DunBradstreetParent"
										},
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DunBradstreetUltimate",
										"Description": "There are eight (8) types of business relationships defined in D&B WorldBase:\n\nSingle Location Subsidiary\n\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \"single location\" and is not part of a corporate family.\n\nHeadquarters\n\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\n\nBranch\n\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\n\nDivision\n\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\n\nSubsidiary\n\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\n\nParent\n\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\n\nDomestic Ultimate\n\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\n\nGlobal Ultimate\n\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "DunBradstreetUltimate"
										},
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "DunBradstreetGlobalUltimate",
										"Description": "There are eight (8) types of business relationships defined in D&B WorldBase:\n\nSingle Location Subsidiary\n\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \"single location\" and is not part of a corporate family.\n\nHeadquarters\n\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\n\nBranch\n\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\n\nDivision\n\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\n\nSubsidiary\n\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\n\nParent\n\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\n\nDomestic Ultimate\n\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\n\nGlobal Ultimate\n\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.",
										"BaseAttributeReference": {
											"Entity": "Manufacturer.cdm.json/Manufacturer",
											"Name": "DunBradstreetGlobalUltimate"
										},
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/Manufacturer",
										"delimiter": ",",
										"multiLine": "false",
										"firstRowAsHeader": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/Manufacturer",
									"Properties": {
										"LinkedServiceName": "dap-synapse-test1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ManufacturerId\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"ManufacturerId\"},\"ManufacturerBusinessName\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"ManufacturerBusinessName\"},\"LegalEntityFormId\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"LegalEntityFormId\"},\"LocationId\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"LocationId\"},\"PartyId\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"PartyId\"},\"GlobalLocationNumber\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"GlobalLocationNumber\"},\"DunsNumber\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunsNumber\"},\"DunBradstreetSingleLocationSubsidiary\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetSingleLocationSubsidiary\"},\"DunBradstreetHeadquarters\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetHeadquarters\"},\"DunBradstreetBranch\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetBranch\"},\"DunBradstreetDivision\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetDivision\"},\"DunBradstreetSubsidiary\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetSubsidiary\"},\"DunBradstreetParent\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetParent\"},\"DunBradstreetUltimate\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetUltimate\"},\"DunBradstreetGlobalUltimate\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetGlobalUltimate\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"Manufacturer\",\"path\":\"Manufacturer.cdm.json/Manufacturer\"},\"description\":\"An entity that manufactures a product.\",\"primaryKey\":[\"ManufacturerId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"ManufacturerId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Manufacturer.\",\"isNullable\":false,\"name\":\"ManufacturerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"ManufacturerBusinessName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The business name of the Manufacturer.\",\"isNullable\":true,\"name\":\"ManufacturerBusinessName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"LegalEntityFormId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Legal Entity Form.\",\"isNullable\":true,\"name\":\"LegalEntityFormId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"LocationId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Location.\",\"isNullable\":true,\"name\":\"LocationId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"PartyId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Party.\",\"isNullable\":true,\"name\":\"PartyId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"GlobalLocationNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":13,\"description\":\"The Global Location Number (GLN) is a simple tool used to uniquely identify locations. It can be used to identify physical locations such as a warehouse, legal entities, or a function / department within a legal entity. The GLN is part of the GS1 system of standards.\",\"isNullable\":true,\"scale\":0,\"name\":\"GlobalLocationNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunsNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":9,\"description\":\"The DUNS number is a nine-digit number issued by Dun & Bradstreet and assigned to each business location in the D&B database having a unique, separate, and distinct operation to businesses for the purpose of identifying them. The number as issued is random and the digits apparently have no significance as to their issuance.\",\"isNullable\":true,\"scale\":0,\"name\":\"DunsNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetSingleLocationSubsidiary\"},\"dataType\":\"boolean\",\"description\":\"There are eight (8) types of business relationships defined in D&B WorldBase:\\n\\nSingle Location Subsidiary\\n\\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \\\"single location\\\" and is not part of a corporate family.\\n\\nHeadquarters\\n\\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\\n\\nBranch\\n\\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\\n\\nDivision\\n\\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\\n\\nSubsidiary\\n\\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\\n\\nParent\\n\\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\\n\\nDomestic Ultimate\\n\\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\\n\\nGlobal Ultimate\\n\\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.\",\"isNullable\":true,\"name\":\"DunBradstreetSingleLocationSubsidiary\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetHeadquarters\"},\"dataType\":\"boolean\",\"description\":\"There are eight (8) types of business relationships defined in D&B WorldBase:\\n\\nSingle Location Subsidiary\\n\\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \\\"single location\\\" and is not part of a corporate family.\\n\\nHeadquarters\\n\\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\\n\\nBranch\\n\\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\\n\\nDivision\\n\\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\\n\\nSubsidiary\\n\\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\\n\\nParent\\n\\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\\n\\nDomestic Ultimate\\n\\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\\n\\nGlobal Ultimate\\n\\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.\",\"isNullable\":true,\"name\":\"DunBradstreetHeadquarters\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetBranch\"},\"dataType\":\"boolean\",\"description\":\"There are eight (8) types of business relationships defined in D&B WorldBase:\\n\\nSingle Location Subsidiary\\n\\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \\\"single location\\\" and is not part of a corporate family.\\n\\nHeadquarters\\n\\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\\n\\nBranch\\n\\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\\n\\nDivision\\n\\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\\n\\nSubsidiary\\n\\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\\n\\nParent\\n\\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\\n\\nDomestic Ultimate\\n\\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\\n\\nGlobal Ultimate\\n\\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.\",\"isNullable\":true,\"name\":\"DunBradstreetBranch\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetDivision\"},\"dataType\":\"boolean\",\"description\":\"There are eight (8) types of business relationships defined in D&B WorldBase:\\n\\nSingle Location Subsidiary\\n\\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \\\"single location\\\" and is not part of a corporate family.\\n\\nHeadquarters\\n\\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\\n\\nBranch\\n\\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\\n\\nDivision\\n\\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\\n\\nSubsidiary\\n\\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\\n\\nParent\\n\\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\\n\\nDomestic Ultimate\\n\\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\\n\\nGlobal Ultimate\\n\\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.\",\"isNullable\":true,\"name\":\"DunBradstreetDivision\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetSubsidiary\"},\"dataType\":\"boolean\",\"description\":\"There are eight (8) types of business relationships defined in D&B WorldBase:\\n\\nSingle Location Subsidiary\\n\\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \\\"single location\\\" and is not part of a corporate family.\\n\\nHeadquarters\\n\\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\\n\\nBranch\\n\\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\\n\\nDivision\\n\\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\\n\\nSubsidiary\\n\\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\\n\\nParent\\n\\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\\n\\nDomestic Ultimate\\n\\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\\n\\nGlobal Ultimate\\n\\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.\",\"isNullable\":true,\"name\":\"DunBradstreetSubsidiary\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetParent\"},\"dataType\":\"boolean\",\"description\":\"There are eight (8) types of business relationships defined in D&B WorldBase:\\n\\nSingle Location Subsidiary\\n\\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \\\"single location\\\" and is not part of a corporate family.\\n\\nHeadquarters\\n\\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\\n\\nBranch\\n\\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\\n\\nDivision\\n\\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\\n\\nSubsidiary\\n\\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\\n\\nParent\\n\\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\\n\\nDomestic Ultimate\\n\\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\\n\\nGlobal Ultimate\\n\\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.\",\"isNullable\":true,\"name\":\"DunBradstreetParent\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetUltimate\"},\"dataType\":\"boolean\",\"description\":\"There are eight (8) types of business relationships defined in D&B WorldBase:\\n\\nSingle Location Subsidiary\\n\\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \\\"single location\\\" and is not part of a corporate family.\\n\\nHeadquarters\\n\\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\\n\\nBranch\\n\\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\\n\\nDivision\\n\\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\\n\\nSubsidiary\\n\\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\\n\\nParent\\n\\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\\n\\nDomestic Ultimate\\n\\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\\n\\nGlobal Ultimate\\n\\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.\",\"isNullable\":true,\"name\":\"DunBradstreetUltimate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Manufacturer.cdm.json/Manufacturer\",\"name\":\"DunBradstreetGlobalUltimate\"},\"dataType\":\"boolean\",\"description\":\"There are eight (8) types of business relationships defined in D&B WorldBase:\\n\\nSingle Location Subsidiary\\n\\nA single location subsidiary has reporting responsibilities to its parent; however, it does not have branches or subsidiaries reporting to it. Do not confuse this with a stand-alone business which is titled \\\"single location\\\" and is not part of a corporate family.\\n\\nHeadquarters\\n\\nA headquarters is a business establishment that has branches or divisions reporting to it, and is financially responsible for those branches or divisions. If the headquarters is more that 50% owned by another corporation, it also will be a subsidiary. If it owns more that 50% of another corporation, then it is also a parent.\\n\\nBranch\\n\\nA branch is a secondary location of its headquarters. It has no legal responsibility for its debts, even though bills may be paid from the branch location. It will have the same legal business name as its headquarters, although branches frequently operate under a different trade style than the headquarters establishment. A branch may be located at the same address as the headquarters if it has a unique trade style. In such cases, the branch may appear to be a duplicate with a different D-U-N-S number than the headquarters record, which may confuse customers if they don't purchase the trade style field.\\n\\nDivision\\n\\nA division, like a branch, is a secondary location of a business. However, a division carries out specific business operations related to the headquarters under a divisional name. Divisions look similar to branches in D&B WorldBase and carry a branch code.\\n\\nSubsidiary\\n\\nA subsidiary is a corporation that is more than 50% owned by another corporation and will have a different legal business name from its parent company. A subsidiary may have branches and/or subsidiaries of its own. If it does, then its D-U-N-S Number appears in the headquarter/parent D-U-N-S Number field of its children.\\n\\nParent\\n\\nA parent is a corporation that owns more than 50 percent of another corporation. The parent company also may be a subsidiary of another corporation. If the parent also has branches, then it is also a headquarters.\\n\\nDomestic Ultimate\\n\\nThe Domestic Ultimate is a subsidiary within the global family tree which is the highest ranking member within a specific country.\\n\\nGlobal Ultimate\\n\\nThe Global Ultimate is the top most responsible entity within the global family tree. The Global Ultimate may have branches and/or subsidiaries reporting directly or indirectly to it.\",\"isNullable\":true,\"name\":\"DunBradstreetGlobalUltimate\"}]}}}",
								"Description": "An entity that manufactures a product.",
								"DisplayFolderInfo": "{\"name\":\"Manufacturing\",\"colorCode\":\"#00727A\"}",
								"PrimaryKeys": "ManufacturerId",
								"spark.sql.sources.provider": "csv",
								"sql:IsAppendOnly": false
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ManufacturerFacility",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "A facility used by a manufacturer for the purpose of manufacturing goods.\n\nManufacturer Facility is another name for plant or site.",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "ManufacturerId",
										"Description": "The unique identifier of a Manufacturer.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerFacility.cdm.json/ManufacturerFacility",
											"Name": "ManufacturerId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturerFacilityId",
										"Description": "The unique identifier of a Manufacturer Facility.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerFacility.cdm.json/ManufacturerFacility",
											"Name": "ManufacturerFacilityId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturerFacilityName",
										"Description": "The name of a Manufacturer Facility.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerFacility.cdm.json/ManufacturerFacility",
											"Name": "ManufacturerFacilityName"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "LocationId",
										"Description": "The unique identifier of a Location.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerFacility.cdm.json/ManufacturerFacility",
											"Name": "LocationId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturerFacilityTelephoneNumber",
										"Description": "The Manufacturer Facility's telephone number.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerFacility.cdm.json/ManufacturerFacility",
											"Name": "ManufacturerFacilityTelephoneNumber"
										},
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 15,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturerFacilityFaxNumber",
										"Description": "The Manufacturer Facility's fax number.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerFacility.cdm.json/ManufacturerFacility",
											"Name": "ManufacturerFacilityFaxNumber"
										},
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 15,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturerFacilityEmailAddress",
										"Description": "The Manufacturer Facility's email address.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerFacility.cdm.json/ManufacturerFacility",
											"Name": "ManufacturerFacilityEmailAddress"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/ManufacturerFacility",
										"delimiter": ",",
										"multiLine": "false",
										"firstRowAsHeader": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/ManufacturerFacility",
									"Properties": {
										"LinkedServiceName": "dap-synapse-test1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ManufacturerId\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerId\"},\"ManufacturerFacilityId\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityId\"},\"ManufacturerFacilityName\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityName\"},\"LocationId\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"LocationId\"},\"ManufacturerFacilityTelephoneNumber\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityTelephoneNumber\"},\"ManufacturerFacilityFaxNumber\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityFaxNumber\"},\"ManufacturerFacilityEmailAddress\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityEmailAddress\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ManufacturerFacility\",\"path\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\"},\"description\":\"A facility used by a manufacturer for the purpose of manufacturing goods.\\n\\nManufacturer Facility is another name for plant or site.\",\"primaryKey\":[\"ManufacturerId\",\"ManufacturerFacilityId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Manufacturer.\",\"isNullable\":false,\"name\":\"ManufacturerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Manufacturer Facility.\",\"isNullable\":false,\"name\":\"ManufacturerFacilityId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a Manufacturer Facility.\",\"isNullable\":true,\"name\":\"ManufacturerFacilityName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"LocationId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Location.\",\"isNullable\":true,\"name\":\"LocationId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityTelephoneNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":15,\"description\":\"The Manufacturer Facility's telephone number.\",\"isNullable\":true,\"scale\":0,\"name\":\"ManufacturerFacilityTelephoneNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityFaxNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":15,\"description\":\"The Manufacturer Facility's fax number.\",\"isNullable\":true,\"scale\":0,\"name\":\"ManufacturerFacilityFaxNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"name\":\"ManufacturerFacilityEmailAddress\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The Manufacturer Facility's email address.\",\"isNullable\":true,\"name\":\"ManufacturerFacilityEmailAddress\"}]}}}",
								"Description": "A facility used by a manufacturer for the purpose of manufacturing goods.\n\nManufacturer Facility is another name for plant or site.",
								"DisplayFolderInfo": "{\"name\":\"Manufacturing\",\"colorCode\":\"#00727A\"}",
								"PrimaryKeys": "ManufacturerId,ManufacturerFacilityId",
								"spark.sql.sources.provider": "csv",
								"sql:IsAppendOnly": false
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ManufacturerLot",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "A group of related Items as designated by the Manufacturer. This could include lots or batch numbers. This is a particularly relevant for recall purposes.",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "ManufacturerId",
										"Description": "The unique identifier of a Manufacturer.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "ManufacturerId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturerLotId",
										"Description": "The unique identifier of a Manufacturer Lot.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "ManufacturerLotId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ItemSku",
										"Description": "The Stock Keeping Unit identifier, which is typically used for inventory-related activities.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "ItemSku"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 40,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "Quantity",
										"Description": "The quantity of non-serialized items in the Manufacturer Lot.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "Quantity"
										},
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "MinimumSerialNumber",
										"Description": "The minimum (low) serial number of products included in the manufacturer item lot.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "MinimumSerialNumber"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 30,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "MaximumSerialNumber",
										"Description": "The maximum (high) serial number of products included in the manufacturer item lot.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "MaximumSerialNumber"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 30,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturedPeriodStartDate",
										"Description": "The starting manufactured date of products included in the manufacturer item lot.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "ManufacturedPeriodStartDate"
										},
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturedPeriodEndDate",
										"Description": "The ending manufactured date of products included in the manufacturer item lot.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "ManufacturedPeriodEndDate"
										},
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "BestBeforeDate",
										"Description": "The date before which the item is best used. This does not imply that the item has expired, just that the product is no longer at its best.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "BestBeforeDate"
										},
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ExpiryDate",
										"Description": "The date after which the item has expired and should not be used.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "ExpiryDate"
										},
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturerLotNote",
										"Description": "A note, comment or additional information regarding the Manufacturer Lot.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "ManufacturerLotNote"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ManufacturerFacilityId",
										"Description": "The unique identifier of a Manufacturer Facility.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "ManufacturerFacilityId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CountryOfOriginId",
										"Description": "The unique identifier of the Country.",
										"BaseAttributeReference": {
											"Entity": "ManufacturerLot.cdm.json/ManufacturerLot",
											"Name": "CountryOfOriginId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/ManufacturerLot",
										"delimiter": ",",
										"multiLine": "false",
										"firstRowAsHeader": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/ManufacturerLot",
									"Properties": {
										"LinkedServiceName": "dap-synapse-test1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ManufacturerId\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturerId\"},\"ManufacturerLotId\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturerLotId\"},\"ItemSku\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ItemSku\"},\"Quantity\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"Quantity\"},\"MinimumSerialNumber\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"MinimumSerialNumber\"},\"MaximumSerialNumber\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"MaximumSerialNumber\"},\"ManufacturedPeriodStartDate\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturedPeriodStartDate\"},\"ManufacturedPeriodEndDate\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturedPeriodEndDate\"},\"BestBeforeDate\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"BestBeforeDate\"},\"ExpiryDate\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ExpiryDate\"},\"ManufacturerLotNote\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturerLotNote\"},\"ManufacturerFacilityId\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturerFacilityId\"},\"CountryOfOriginId\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"CountryOfOriginId\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ManufacturerLot\",\"path\":\"ManufacturerLot.cdm.json/ManufacturerLot\"},\"description\":\"A group of related Items as designated by the Manufacturer. This could include lots or batch numbers. This is a particularly relevant for recall purposes.\",\"primaryKey\":[\"ManufacturerId\",\"ManufacturerLotId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturerId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Manufacturer.\",\"isNullable\":false,\"name\":\"ManufacturerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturerLotId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Manufacturer Lot.\",\"isNullable\":false,\"name\":\"ManufacturerLotId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ItemSku\"},\"dataType\":\"string\",\"dataTypeLength\":40,\"description\":\"The Stock Keeping Unit identifier, which is typically used for inventory-related activities.\",\"isNullable\":false,\"name\":\"ItemSku\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"Quantity\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The quantity of non-serialized items in the Manufacturer Lot.\",\"isNullable\":true,\"scale\":2,\"name\":\"Quantity\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"MinimumSerialNumber\"},\"dataType\":\"string\",\"dataTypeLength\":30,\"description\":\"The minimum (low) serial number of products included in the manufacturer item lot.\",\"isNullable\":true,\"name\":\"MinimumSerialNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"MaximumSerialNumber\"},\"dataType\":\"string\",\"dataTypeLength\":30,\"description\":\"The maximum (high) serial number of products included in the manufacturer item lot.\",\"isNullable\":true,\"name\":\"MaximumSerialNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturedPeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The starting manufactured date of products included in the manufacturer item lot.\",\"isNullable\":true,\"name\":\"ManufacturedPeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturedPeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The ending manufactured date of products included in the manufacturer item lot.\",\"isNullable\":true,\"name\":\"ManufacturedPeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"BestBeforeDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date before which the item is best used. This does not imply that the item has expired, just that the product is no longer at its best.\",\"isNullable\":true,\"name\":\"BestBeforeDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ExpiryDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date after which the item has expired and should not be used.\",\"isNullable\":true,\"name\":\"ExpiryDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturerLotNote\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"A note, comment or additional information regarding the Manufacturer Lot.\",\"isNullable\":true,\"name\":\"ManufacturerLotNote\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"ManufacturerFacilityId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Manufacturer Facility.\",\"isNullable\":true,\"name\":\"ManufacturerFacilityId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"name\":\"CountryOfOriginId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Country.\",\"isNullable\":true,\"name\":\"CountryOfOriginId\"}]}}}",
								"Description": "A group of related Items as designated by the Manufacturer. This could include lots or batch numbers. This is a particularly relevant for recall purposes.",
								"DisplayFolderInfo": "{\"name\":\"Manufacturing\",\"colorCode\":\"#00727A\"}",
								"PrimaryKeys": "ManufacturerId,ManufacturerLotId",
								"spark.sql.sources.provider": "csv",
								"sql:IsAppendOnly": false
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "MaterialType",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "A type of material based on common characteristics, function or similar criteria.\n\nEx:\n- Solvent\n- Composition\n- Cell line catalyst\n- Intermediate\n- Impurity\n- Metabolite\n- Final intended substance\n- Resultant substance\n- Water\n- Sulphur\n- Methane\n- Carbon",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "MaterialTypeId",
										"Description": "The unique identifier of a material type.",
										"BaseAttributeReference": {
											"Entity": "MaterialType.cdm.json/MaterialType",
											"Name": "MaterialTypeId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "MaterialTypeName",
										"Description": "The name of a material type.",
										"BaseAttributeReference": {
											"Entity": "MaterialType.cdm.json/MaterialType",
											"Name": "MaterialTypeName"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "MaterialTypeDescription",
										"Description": "The description of a material type.",
										"BaseAttributeReference": {
											"Entity": "MaterialType.cdm.json/MaterialType",
											"Name": "MaterialTypeDescription"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/MaterialType",
										"delimiter": ",",
										"multiLine": "false",
										"firstRowAsHeader": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/MaterialType",
									"Properties": {
										"LinkedServiceName": "dap-synapse-test1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"MaterialTypeId\":{\"entity\":\"MaterialType.cdm.json/MaterialType\",\"name\":\"MaterialTypeId\"},\"MaterialTypeName\":{\"entity\":\"MaterialType.cdm.json/MaterialType\",\"name\":\"MaterialTypeName\"},\"MaterialTypeDescription\":{\"entity\":\"MaterialType.cdm.json/MaterialType\",\"name\":\"MaterialTypeDescription\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"MaterialType\",\"path\":\"MaterialType.cdm.json/MaterialType\"},\"description\":\"A type of material based on common characteristics, function or similar criteria.\\n\\nEx:\\n- Solvent\\n- Composition\\n- Cell line catalyst\\n- Intermediate\\n- Impurity\\n- Metabolite\\n- Final intended substance\\n- Resultant substance\\n- Water\\n- Sulphur\\n- Methane\\n- Carbon\",\"primaryKey\":[\"MaterialTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"MaterialType.cdm.json/MaterialType\",\"name\":\"MaterialTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a material type.\",\"isNullable\":false,\"name\":\"MaterialTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"MaterialType.cdm.json/MaterialType\",\"name\":\"MaterialTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a material type.\",\"isNullable\":true,\"name\":\"MaterialTypeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"MaterialType.cdm.json/MaterialType\",\"name\":\"MaterialTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of a material type.\",\"isNullable\":true,\"name\":\"MaterialTypeDescription\"}]}}}",
								"Description": "A type of material based on common characteristics, function or similar criteria.\n\nEx:\n- Solvent\n- Composition\n- Cell line catalyst\n- Intermediate\n- Impurity\n- Metabolite\n- Final intended substance\n- Resultant substance\n- Water\n- Sulphur\n- Methane\n- Carbon",
								"DisplayFolderInfo": "{\"name\":\"Manufacturing\",\"colorCode\":\"#00727A\"}",
								"PrimaryKeys": "MaterialTypeId",
								"spark.sql.sources.provider": "csv",
								"sql:IsAppendOnly": false
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "RockSampleType",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Description": "The type of sample.\n\nEx:\n- Core Sample\n- Back Sample\n- Bulk Sample\n- Channel Sample\n- Chip Sample\n- Point Sample\n- Linear Sample\n- Panel Sample\n\nwhere:\n\nCORE SAMPLE\nA cylindrical section of (usually) a naturally occurring substance. Most core samples are obtained by drilling with special drills into the substance.\n\nBACK SAMPLE\nRock chips collected from the roof or back of an underground opening for the purpose of determining grade.\n\nBULK SAMPLE\nA large sample of mineralized rock, frequently hundreds of tonnes, selected in such a manner as to be representative of the potential orebody being sampled. Used to determine metallurgical characteristics.  \n\nCHANNEL SAMPLE\nA sample composed of pieces of vein or mineral deposit that have been cut out of a small trench or channel, usually about 10 cm wide and 2 cm deep.  \n\nCHIP SAMPLE\nA method of sampling a rock exposure whereby a regular series of small chips of rock is broken off along a line across the face.  \n\nPOINT SAMPLES\nThis is can be a single grab sample chosen to represent some mass; or it can be random samples taken from various source points, generally within a predetermined area, and can be either in two dimensions or three dimensions (i.e. dump pile) and composited.\n\nLINEAR SAMPLES\nContinuous sampling over an interval in a line such as channel samples or drill hole samples, and profile sampling of overburden.\n\nPANEL SAMPLES\nThese are planar samples made up of multiple chips collected from a surface with dimensions (i.e. one by two meters).",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "SampleTypeId",
										"Description": "The unique identifier of a sample type.",
										"BaseAttributeReference": {
											"Entity": "RockSampleType.cdm.json/RockSampleType",
											"Name": "SampleTypeId"
										},
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "SampleTypeName",
										"Description": "The name of a sample type.",
										"BaseAttributeReference": {
											"Entity": "RockSampleType.cdm.json/RockSampleType",
											"Name": "SampleTypeName"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "SampleTypeDescription",
										"Description": "The description of a sample type.",
										"BaseAttributeReference": {
											"Entity": "RockSampleType.cdm.json/RockSampleType",
											"Name": "SampleTypeDescription"
										},
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.mapred.SequenceFileInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat",
									"FormatType": "csv",
									"SerializeLib": "org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",
									"Properties": {
										"path": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/RockSampleType",
										"delimiter": ",",
										"multiLine": "false",
										"firstRowAsHeader": "false",
										"serialization.format": "1",
										"escape": "\\",
										"quote": "\"",
										"FormatTypeSetToDatabaseDefault": true,
										"header": "false"
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://dapfstest01@dapsatest01.dfs.core.windows.net/Database1/RockSampleType",
									"Properties": {
										"LinkedServiceName": "dap-synapse-test1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"SampleTypeId\":{\"entity\":\"RockSampleType.cdm.json/RockSampleType\",\"name\":\"SampleTypeId\"},\"SampleTypeName\":{\"entity\":\"RockSampleType.cdm.json/RockSampleType\",\"name\":\"SampleTypeName\"},\"SampleTypeDescription\":{\"entity\":\"RockSampleType.cdm.json/RockSampleType\",\"name\":\"SampleTypeDescription\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"RockSampleType\",\"path\":\"RockSampleType.cdm.json/RockSampleType\"},\"description\":\"The type of sample.\\n\\nEx:\\n- Core Sample\\n- Back Sample\\n- Bulk Sample\\n- Channel Sample\\n- Chip Sample\\n- Point Sample\\n- Linear Sample\\n- Panel Sample\\n\\nwhere:\\n\\nCORE SAMPLE\\nA cylindrical section of (usually) a naturally occurring substance. Most core samples are obtained by drilling with special drills into the substance.\\n\\nBACK SAMPLE\\nRock chips collected from the roof or back of an underground opening for the purpose of determining grade.\\n\\nBULK SAMPLE\\nA large sample of mineralized rock, frequently hundreds of tonnes, selected in such a manner as to be representative of the potential orebody being sampled. Used to determine metallurgical characteristics.  \\n\\nCHANNEL SAMPLE\\nA sample composed of pieces of vein or mineral deposit that have been cut out of a small trench or channel, usually about 10 cm wide and 2 cm deep.  \\n\\nCHIP SAMPLE\\nA method of sampling a rock exposure whereby a regular series of small chips of rock is broken off along a line across the face.  \\n\\nPOINT SAMPLES\\nThis is can be a single grab sample chosen to represent some mass; or it can be random samples taken from various source points, generally within a predetermined area, and can be either in two dimensions or three dimensions (i.e. dump pile) and composited.\\n\\nLINEAR SAMPLES\\nContinuous sampling over an interval in a line such as channel samples or drill hole samples, and profile sampling of overburden.\\n\\nPANEL SAMPLES\\nThese are planar samples made up of multiple chips collected from a surface with dimensions (i.e. one by two meters).\",\"primaryKey\":[\"SampleTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"RockSampleType.cdm.json/RockSampleType\",\"name\":\"SampleTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a sample type.\",\"isNullable\":false,\"name\":\"SampleTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"RockSampleType.cdm.json/RockSampleType\",\"name\":\"SampleTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a sample type.\",\"isNullable\":true,\"name\":\"SampleTypeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"RockSampleType.cdm.json/RockSampleType\",\"name\":\"SampleTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of a sample type.\",\"isNullable\":true,\"name\":\"SampleTypeDescription\"}]}}}",
								"Description": "The type of sample.\n\nEx:\n- Core Sample\n- Back Sample\n- Bulk Sample\n- Channel Sample\n- Chip Sample\n- Point Sample\n- Linear Sample\n- Panel Sample\n\nwhere:\n\nCORE SAMPLE\nA cylindrical section of (usually) a naturally occurring substance. Most core samples are obtained by drilling with special drills into the substance.\n\nBACK SAMPLE\nRock chips collected from the roof or back of an underground opening for the purpose of determining grade.\n\nBULK SAMPLE\nA large sample of mineralized rock, frequently hundreds of tonnes, selected in such a manner as to be representative of the potential orebody being sampled. Used to determine metallurgical characteristics.  \n\nCHANNEL SAMPLE\nA sample composed of pieces of vein or mineral deposit that have been cut out of a small trench or channel, usually about 10 cm wide and 2 cm deep.  \n\nCHIP SAMPLE\nA method of sampling a rock exposure whereby a regular series of small chips of rock is broken off along a line across the face.  \n\nPOINT SAMPLES\nThis is can be a single grab sample chosen to represent some mass; or it can be random samples taken from various source points, generally within a predetermined area, and can be either in two dimensions or three dimensions (i.e. dump pile) and composited.\n\nLINEAR SAMPLES\nContinuous sampling over an interval in a line such as channel samples or drill hole samples, and profile sampling of overburden.\n\nPANEL SAMPLES\nThese are planar samples made up of multiple chips collected from a surface with dimensions (i.e. one by two meters).",
								"DisplayFolderInfo": "{\"name\":\"Manufacturing\",\"colorCode\":\"#00727A\"}",
								"PrimaryKeys": "SampleTypeId",
								"spark.sql.sources.provider": "csv",
								"sql:IsAppendOnly": false
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-wmkhebscnz",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "CostCategory",
							"ToTableName": "CostType",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CostCategoryId",
									"ToColumnName": "CostCategoryId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"CostCategory.cdm.json/CostCategory\",\"toEntity\":\"CostType.cdm.json/CostType\",\"joinPairs\":[{\"fromAttribute\":\"CostCategoryId\",\"toAttribute\":\"CostCategoryId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-pjmshqwndq",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Manufacturer",
							"ToTableName": "ManufacturerFacility",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ManufacturerId",
									"ToColumnName": "ManufacturerId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Manufacturer.cdm.json/Manufacturer\",\"toEntity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"joinPairs\":[{\"fromAttribute\":\"ManufacturerId\",\"toAttribute\":\"ManufacturerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-djqedjgebj",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Manufacturer",
							"ToTableName": "ManufacturerLot",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ManufacturerId",
									"ToColumnName": "ManufacturerId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Manufacturer.cdm.json/Manufacturer\",\"toEntity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"joinPairs\":[{\"fromAttribute\":\"ManufacturerId\",\"toAttribute\":\"ManufacturerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-vuxxglmwsz",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "ManufacturerFacility",
							"ToTableName": "ManufacturerLot",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ManufacturerFacilityId",
									"ToColumnName": "ManufacturerFacilityId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"toEntity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"joinPairs\":[{\"fromAttribute\":\"ManufacturerFacilityId\",\"toAttribute\":\"ManufacturerFacilityId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-drdussniuv",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Database1"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "ManufacturerFacility",
							"ToTableName": "ManufacturerLot",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ManufacturerId",
									"ToColumnName": "ManufacturerId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"ManufacturerFacility.cdm.json/ManufacturerFacility\",\"toEntity\":\"ManufacturerLot.cdm.json/ManufacturerLot\",\"joinPairs\":[{\"fromAttribute\":\"ManufacturerId\",\"toAttribute\":\"ManufacturerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "SourceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceData",
						"SourceData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/datasets/Json1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Json1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_raw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Raw",
						"fileSystem": "data"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_adls_raw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}